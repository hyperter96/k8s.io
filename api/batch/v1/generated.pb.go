//
//Copyright The Kubernetes Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: github.com/hyperter96/k8s.io/api/batch/v1/generated.proto

package v1

import (
	v11 "github.com/hyperter96/k8s.io/api/core/v1"
	v1 "github.com/hyperter96/k8s.io/apimachinery/pkg/apis/meta/v1"
	_ "github.com/hyperter96/k8s.io/apimachinery/pkg/runtime"
	_ "github.com/hyperter96/k8s.io/apimachinery/pkg/runtime/schema"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CronJob represents the configuration of a single cron job.
type CronJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Specification of the desired behavior of a cron job, including the schedule.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Spec *CronJobSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// Current status of a cron job.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Status *CronJobStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (x *CronJob) Reset() {
	*x = CronJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJob) ProtoMessage() {}

func (x *CronJob) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJob.ProtoReflect.Descriptor instead.
func (*CronJob) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{0}
}

func (x *CronJob) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CronJob) GetSpec() *CronJobSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CronJob) GetStatus() *CronJobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// CronJobList is a collection of cron jobs.
type CronJobList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard list metadata.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// items is the list of CronJobs.
	Items []*CronJob `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *CronJobList) Reset() {
	*x = CronJobList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronJobList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJobList) ProtoMessage() {}

func (x *CronJobList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJobList.ProtoReflect.Descriptor instead.
func (*CronJobList) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{1}
}

func (x *CronJobList) GetMetadata() *v1.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CronJobList) GetItems() []*CronJob {
	if x != nil {
		return x.Items
	}
	return nil
}

// CronJobSpec describes how the job execution will look like and when it will actually run.
type CronJobSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	Schedule *string `protobuf:"bytes,1,opt,name=schedule" json:"schedule,omitempty"`
	// The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
	// If not specified, this will default to the time zone of the kube-controller-manager process.
	// The set of valid time zone names and the time zone offset is loaded from the system-wide time zone
	// database by the API server during CronJob validation and the controller manager during execution.
	// If no system-wide time zone database can be found a bundled version of the database is used instead.
	// If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host
	// configuration, the controller will stop creating new new Jobs and will create a system event with the
	// reason UnknownTimeZone.
	// More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
	// This is beta field and must be enabled via the `CronJobTimeZone` feature gate.
	// +optional
	TimeZone *string `protobuf:"bytes,8,opt,name=timeZone" json:"timeZone,omitempty"`
	// Optional deadline in seconds for starting the job if it misses scheduled
	// time for any reason.  Missed jobs executions will be counted as failed ones.
	// +optional
	StartingDeadlineSeconds *int64 `protobuf:"varint,2,opt,name=startingDeadlineSeconds" json:"startingDeadlineSeconds,omitempty"`
	// Specifies how to treat concurrent executions of a Job.
	// Valid values are:
	// - "Allow" (default): allows CronJobs to run concurrently;
	// - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet;
	// - "Replace": cancels currently running job and replaces it with a new one
	// +optional
	ConcurrencyPolicy *string `protobuf:"bytes,3,opt,name=concurrencyPolicy" json:"concurrencyPolicy,omitempty"`
	// This flag tells the controller to suspend subsequent executions, it does
	// not apply to already started executions.  Defaults to false.
	// +optional
	Suspend *bool `protobuf:"varint,4,opt,name=suspend" json:"suspend,omitempty"`
	// Specifies the job that will be created when executing a CronJob.
	JobTemplate *JobTemplateSpec `protobuf:"bytes,5,opt,name=jobTemplate" json:"jobTemplate,omitempty"`
	// The number of successful finished jobs to retain. Value must be non-negative integer.
	// Defaults to 3.
	// +optional
	SuccessfulJobsHistoryLimit *int32 `protobuf:"varint,6,opt,name=successfulJobsHistoryLimit" json:"successfulJobsHistoryLimit,omitempty"`
	// The number of failed finished jobs to retain. Value must be non-negative integer.
	// Defaults to 1.
	// +optional
	FailedJobsHistoryLimit *int32 `protobuf:"varint,7,opt,name=failedJobsHistoryLimit" json:"failedJobsHistoryLimit,omitempty"`
}

func (x *CronJobSpec) Reset() {
	*x = CronJobSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronJobSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJobSpec) ProtoMessage() {}

func (x *CronJobSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJobSpec.ProtoReflect.Descriptor instead.
func (*CronJobSpec) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{2}
}

func (x *CronJobSpec) GetSchedule() string {
	if x != nil && x.Schedule != nil {
		return *x.Schedule
	}
	return ""
}

func (x *CronJobSpec) GetTimeZone() string {
	if x != nil && x.TimeZone != nil {
		return *x.TimeZone
	}
	return ""
}

func (x *CronJobSpec) GetStartingDeadlineSeconds() int64 {
	if x != nil && x.StartingDeadlineSeconds != nil {
		return *x.StartingDeadlineSeconds
	}
	return 0
}

func (x *CronJobSpec) GetConcurrencyPolicy() string {
	if x != nil && x.ConcurrencyPolicy != nil {
		return *x.ConcurrencyPolicy
	}
	return ""
}

func (x *CronJobSpec) GetSuspend() bool {
	if x != nil && x.Suspend != nil {
		return *x.Suspend
	}
	return false
}

func (x *CronJobSpec) GetJobTemplate() *JobTemplateSpec {
	if x != nil {
		return x.JobTemplate
	}
	return nil
}

func (x *CronJobSpec) GetSuccessfulJobsHistoryLimit() int32 {
	if x != nil && x.SuccessfulJobsHistoryLimit != nil {
		return *x.SuccessfulJobsHistoryLimit
	}
	return 0
}

func (x *CronJobSpec) GetFailedJobsHistoryLimit() int32 {
	if x != nil && x.FailedJobsHistoryLimit != nil {
		return *x.FailedJobsHistoryLimit
	}
	return 0
}

// CronJobStatus represents the current state of a cron job.
type CronJobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pointers to currently running jobs.
	// +optional
	// +listType=atomic
	Active []*v11.ObjectReference `protobuf:"bytes,1,rep,name=active" json:"active,omitempty"`
	// Information when was the last time the job was successfully scheduled.
	// +optional
	LastScheduleTime *v1.Time `protobuf:"bytes,4,opt,name=lastScheduleTime" json:"lastScheduleTime,omitempty"`
	// Information when was the last time the job successfully completed.
	// +optional
	LastSuccessfulTime *v1.Time `protobuf:"bytes,5,opt,name=lastSuccessfulTime" json:"lastSuccessfulTime,omitempty"`
}

func (x *CronJobStatus) Reset() {
	*x = CronJobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronJobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJobStatus) ProtoMessage() {}

func (x *CronJobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJobStatus.ProtoReflect.Descriptor instead.
func (*CronJobStatus) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{3}
}

func (x *CronJobStatus) GetActive() []*v11.ObjectReference {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *CronJobStatus) GetLastScheduleTime() *v1.Time {
	if x != nil {
		return x.LastScheduleTime
	}
	return nil
}

func (x *CronJobStatus) GetLastSuccessfulTime() *v1.Time {
	if x != nil {
		return x.LastSuccessfulTime
	}
	return nil
}

// Job represents the configuration of a single job.
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Specification of the desired behavior of a job.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Spec *JobSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// Current status of a job.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Status *JobStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{4}
}

func (x *Job) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Job) GetSpec() *JobSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Job) GetStatus() *JobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// JobCondition describes current state of a job.
type JobCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of job condition, Complete or Failed.
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Status of the condition, one of True, False, Unknown.
	Status *string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	// Last time the condition was checked.
	// +optional
	LastProbeTime *v1.Time `protobuf:"bytes,3,opt,name=lastProbeTime" json:"lastProbeTime,omitempty"`
	// Last time the condition transit from one status to another.
	// +optional
	LastTransitionTime *v1.Time `protobuf:"bytes,4,opt,name=lastTransitionTime" json:"lastTransitionTime,omitempty"`
	// (brief) reason for the condition's last transition.
	// +optional
	Reason *string `protobuf:"bytes,5,opt,name=reason" json:"reason,omitempty"`
	// Human readable message indicating details about last transition.
	// +optional
	Message *string `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
}

func (x *JobCondition) Reset() {
	*x = JobCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCondition) ProtoMessage() {}

func (x *JobCondition) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCondition.ProtoReflect.Descriptor instead.
func (*JobCondition) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{5}
}

func (x *JobCondition) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *JobCondition) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *JobCondition) GetLastProbeTime() *v1.Time {
	if x != nil {
		return x.LastProbeTime
	}
	return nil
}

func (x *JobCondition) GetLastTransitionTime() *v1.Time {
	if x != nil {
		return x.LastTransitionTime
	}
	return nil
}

func (x *JobCondition) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *JobCondition) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// JobList is a collection of jobs.
type JobList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard list metadata.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// items is the list of Jobs.
	Items []*Job `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *JobList) Reset() {
	*x = JobList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobList) ProtoMessage() {}

func (x *JobList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobList.ProtoReflect.Descriptor instead.
func (*JobList) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{6}
}

func (x *JobList) GetMetadata() *v1.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JobList) GetItems() []*Job {
	if x != nil {
		return x.Items
	}
	return nil
}

// JobSpec describes how the job execution will look like.
type JobSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the maximum desired number of pods the job should
	// run at any given time. The actual number of pods running in steady state will
	// be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism),
	// i.e. when the work left to do is less than max parallelism.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	// +optional
	Parallelism *int32 `protobuf:"varint,1,opt,name=parallelism" json:"parallelism,omitempty"`
	// Specifies the desired number of successfully finished pods the
	// job should be run with.  Setting to nil means that the success of any
	// pod signals the success of all pods, and allows parallelism to have any positive
	// value.  Setting to 1 means that parallelism is limited to 1 and the success of that
	// pod signals the success of the job.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	// +optional
	Completions *int32 `protobuf:"varint,2,opt,name=completions" json:"completions,omitempty"`
	// Specifies the duration in seconds relative to the startTime that the job
	// may be continuously active before the system tries to terminate it; value
	// must be positive integer. If a Job is suspended (at creation or through an
	// update), this timer will effectively be stopped and reset when the Job is
	// resumed again.
	// +optional
	ActiveDeadlineSeconds *int64 `protobuf:"varint,3,opt,name=activeDeadlineSeconds" json:"activeDeadlineSeconds,omitempty"`
	// Specifies the policy of handling failed pods. In particular, it allows to
	// specify the set of actions and conditions which need to be
	// satisfied to take the associated action.
	// If empty, the default behaviour applies - the counter of failed pods,
	// represented by the jobs's .status.failed field, is incremented and it is
	// checked against the backoffLimit. This field cannot be used in combination
	// with restartPolicy=OnFailure.
	//
	// This field is alpha-level. To use this field, you must enable the
	// `JobPodFailurePolicy` feature gate (disabled by default).
	// +optional
	PodFailurePolicy *PodFailurePolicy `protobuf:"bytes,11,opt,name=podFailurePolicy" json:"podFailurePolicy,omitempty"`
	// Specifies the number of retries before marking this job failed.
	// Defaults to 6
	// +optional
	BackoffLimit *int32 `protobuf:"varint,7,opt,name=backoffLimit" json:"backoffLimit,omitempty"`
	// A label query over pods that should match the pod count.
	// Normally, the system sets this field for you.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	// +optional
	Selector *v1.LabelSelector `protobuf:"bytes,4,opt,name=selector" json:"selector,omitempty"`
	// manualSelector controls generation of pod labels and pod selectors.
	// Leave `manualSelector` unset unless you are certain what you are doing.
	// When false or unset, the system pick labels unique to this job
	// and appends those labels to the pod template.  When true,
	// the user is responsible for picking unique labels and specifying
	// the selector.  Failure to pick a unique label may cause this
	// and other jobs to not function correctly.  However, You may see
	// `manualSelector=true` in jobs that were created with the old `extensions/v1beta1`
	// API.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
	// +optional
	ManualSelector *bool `protobuf:"varint,5,opt,name=manualSelector" json:"manualSelector,omitempty"`
	// Describes the pod that will be created when executing a job.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	Template *v11.PodTemplateSpec `protobuf:"bytes,6,opt,name=template" json:"template,omitempty"`
	// ttlSecondsAfterFinished limits the lifetime of a Job that has finished
	// execution (either Complete or Failed). If this field is set,
	// ttlSecondsAfterFinished after the Job finishes, it is eligible to be
	// automatically deleted. When the Job is being deleted, its lifecycle
	// guarantees (e.g. finalizers) will be honored. If this field is unset,
	// the Job won't be automatically deleted. If this field is set to zero,
	// the Job becomes eligible to be deleted immediately after it finishes.
	// +optional
	TtlSecondsAfterFinished *int32 `protobuf:"varint,8,opt,name=ttlSecondsAfterFinished" json:"ttlSecondsAfterFinished,omitempty"`
	// CompletionMode specifies how Pod completions are tracked. It can be
	// `NonIndexed` (default) or `Indexed`.
	//
	// `NonIndexed` means that the Job is considered complete when there have
	// been .spec.completions successfully completed Pods. Each Pod completion is
	// homologous to each other.
	//
	// `Indexed` means that the Pods of a
	// Job get an associated completion index from 0 to (.spec.completions - 1),
	// available in the annotation batch.kubernetes.io/job-completion-index.
	// The Job is considered complete when there is one successfully completed Pod
	// for each index.
	// When value is `Indexed`, .spec.completions must be specified and
	// `.spec.parallelism` must be less than or equal to 10^5.
	// In addition, The Pod name takes the form
	// `$(job-name)-$(index)-$(random-string)`,
	// the Pod hostname takes the form `$(job-name)-$(index)`.
	//
	// More completion modes can be added in the future.
	// If the Job controller observes a mode that it doesn't recognize, which
	// is possible during upgrades due to version skew, the controller
	// skips updates for the Job.
	// +optional
	CompletionMode *string `protobuf:"bytes,9,opt,name=completionMode" json:"completionMode,omitempty"`
	// Suspend specifies whether the Job controller should create Pods or not. If
	// a Job is created with suspend set to true, no Pods are created by the Job
	// controller. If a Job is suspended after creation (i.e. the flag goes from
	// false to true), the Job controller will delete all active Pods associated
	// with this Job. Users must design their workload to gracefully handle this.
	// Suspending a Job will reset the StartTime field of the Job, effectively
	// resetting the ActiveDeadlineSeconds timer too. Defaults to false.
	//
	// +optional
	Suspend *bool `protobuf:"varint,10,opt,name=suspend" json:"suspend,omitempty"`
}

func (x *JobSpec) Reset() {
	*x = JobSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSpec) ProtoMessage() {}

func (x *JobSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSpec.ProtoReflect.Descriptor instead.
func (*JobSpec) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{7}
}

func (x *JobSpec) GetParallelism() int32 {
	if x != nil && x.Parallelism != nil {
		return *x.Parallelism
	}
	return 0
}

func (x *JobSpec) GetCompletions() int32 {
	if x != nil && x.Completions != nil {
		return *x.Completions
	}
	return 0
}

func (x *JobSpec) GetActiveDeadlineSeconds() int64 {
	if x != nil && x.ActiveDeadlineSeconds != nil {
		return *x.ActiveDeadlineSeconds
	}
	return 0
}

func (x *JobSpec) GetPodFailurePolicy() *PodFailurePolicy {
	if x != nil {
		return x.PodFailurePolicy
	}
	return nil
}

func (x *JobSpec) GetBackoffLimit() int32 {
	if x != nil && x.BackoffLimit != nil {
		return *x.BackoffLimit
	}
	return 0
}

func (x *JobSpec) GetSelector() *v1.LabelSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *JobSpec) GetManualSelector() bool {
	if x != nil && x.ManualSelector != nil {
		return *x.ManualSelector
	}
	return false
}

func (x *JobSpec) GetTemplate() *v11.PodTemplateSpec {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *JobSpec) GetTtlSecondsAfterFinished() int32 {
	if x != nil && x.TtlSecondsAfterFinished != nil {
		return *x.TtlSecondsAfterFinished
	}
	return 0
}

func (x *JobSpec) GetCompletionMode() string {
	if x != nil && x.CompletionMode != nil {
		return *x.CompletionMode
	}
	return ""
}

func (x *JobSpec) GetSuspend() bool {
	if x != nil && x.Suspend != nil {
		return *x.Suspend
	}
	return false
}

// JobStatus represents the current state of a Job.
type JobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The latest available observations of an object's current state. When a Job
	// fails, one of the conditions will have type "Failed" and status true. When
	// a Job is suspended, one of the conditions will have type "Suspended" and
	// status true; when the Job is resumed, the status of this condition will
	// become false. When a Job is completed, one of the conditions will have
	// type "Complete" and status true.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
	// +optional
	// +patchMergeKey=type
	// +patchStrategy=merge
	// +listType=atomic
	Conditions []*JobCondition `protobuf:"bytes,1,rep,name=conditions" json:"conditions,omitempty"`
	// Represents time when the job controller started processing a job. When a
	// Job is created in the suspended state, this field is not set until the
	// first time it is resumed. This field is reset every time a Job is resumed
	// from suspension. It is represented in RFC3339 form and is in UTC.
	// +optional
	StartTime *v1.Time `protobuf:"bytes,2,opt,name=startTime" json:"startTime,omitempty"`
	// Represents time when the job was completed. It is not guaranteed to
	// be set in happens-before order across separate operations.
	// It is represented in RFC3339 form and is in UTC.
	// The completion time is only set when the job finishes successfully.
	// +optional
	CompletionTime *v1.Time `protobuf:"bytes,3,opt,name=completionTime" json:"completionTime,omitempty"`
	// The number of pending and running pods.
	// +optional
	Active *int32 `protobuf:"varint,4,opt,name=active" json:"active,omitempty"`
	// The number of pods which reached phase Succeeded.
	// +optional
	Succeeded *int32 `protobuf:"varint,5,opt,name=succeeded" json:"succeeded,omitempty"`
	// The number of pods which reached phase Failed.
	// +optional
	Failed *int32 `protobuf:"varint,6,opt,name=failed" json:"failed,omitempty"`
	// CompletedIndexes holds the completed indexes when .spec.completionMode =
	// "Indexed" in a text format. The indexes are represented as decimal integers
	// separated by commas. The numbers are listed in increasing order. Three or
	// more consecutive numbers are compressed and represented by the first and
	// last element of the series, separated by a hyphen.
	// For example, if the completed indexes are 1, 3, 4, 5 and 7, they are
	// represented as "1,3-5,7".
	// +optional
	CompletedIndexes *string `protobuf:"bytes,7,opt,name=completedIndexes" json:"completedIndexes,omitempty"`
	// UncountedTerminatedPods holds the UIDs of Pods that have terminated but
	// the job controller hasn't yet accounted for in the status counters.
	//
	// The job controller creates pods with a finalizer. When a pod terminates
	// (succeeded or failed), the controller does three steps to account for it
	// in the job status:
	// (1) Add the pod UID to the arrays in this field.
	// (2) Remove the pod finalizer.
	// (3) Remove the pod UID from the arrays while increasing the corresponding
	//
	//	counter.
	//
	// Old jobs might not be tracked using this field, in which case the field
	// remains null.
	// +optional
	UncountedTerminatedPods *UncountedTerminatedPods `protobuf:"bytes,8,opt,name=uncountedTerminatedPods" json:"uncountedTerminatedPods,omitempty"`
	// The number of pods which have a Ready condition.
	//
	// This field is beta-level. The job controller populates the field when
	// the feature gate JobReadyPods is enabled (enabled by default).
	// +optional
	Ready *int32 `protobuf:"varint,9,opt,name=ready" json:"ready,omitempty"`
}

func (x *JobStatus) Reset() {
	*x = JobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatus) ProtoMessage() {}

func (x *JobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatus.ProtoReflect.Descriptor instead.
func (*JobStatus) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{8}
}

func (x *JobStatus) GetConditions() []*JobCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *JobStatus) GetStartTime() *v1.Time {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *JobStatus) GetCompletionTime() *v1.Time {
	if x != nil {
		return x.CompletionTime
	}
	return nil
}

func (x *JobStatus) GetActive() int32 {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return 0
}

func (x *JobStatus) GetSucceeded() int32 {
	if x != nil && x.Succeeded != nil {
		return *x.Succeeded
	}
	return 0
}

func (x *JobStatus) GetFailed() int32 {
	if x != nil && x.Failed != nil {
		return *x.Failed
	}
	return 0
}

func (x *JobStatus) GetCompletedIndexes() string {
	if x != nil && x.CompletedIndexes != nil {
		return *x.CompletedIndexes
	}
	return ""
}

func (x *JobStatus) GetUncountedTerminatedPods() *UncountedTerminatedPods {
	if x != nil {
		return x.UncountedTerminatedPods
	}
	return nil
}

func (x *JobStatus) GetReady() int32 {
	if x != nil && x.Ready != nil {
		return *x.Ready
	}
	return 0
}

// JobTemplateSpec describes the data a Job should have when created from a template
type JobTemplateSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata of the jobs created from this template.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Specification of the desired behavior of the job.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Spec *JobSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (x *JobTemplateSpec) Reset() {
	*x = JobTemplateSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobTemplateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobTemplateSpec) ProtoMessage() {}

func (x *JobTemplateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobTemplateSpec.ProtoReflect.Descriptor instead.
func (*JobTemplateSpec) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{9}
}

func (x *JobTemplateSpec) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JobTemplateSpec) GetSpec() *JobSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// PodFailurePolicy describes how failed pods influence the backoffLimit.
type PodFailurePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pod failure policy rules. The rules are evaluated in order.
	// Once a rule matches a Pod failure, the remaining of the rules are ignored.
	// When no rule matches the Pod failure, the default handling applies - the
	// counter of pod failures is incremented and it is checked against
	// the backoffLimit. At most 20 elements are allowed.
	// +listType=atomic
	Rules []*PodFailurePolicyRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (x *PodFailurePolicy) Reset() {
	*x = PodFailurePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodFailurePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodFailurePolicy) ProtoMessage() {}

func (x *PodFailurePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodFailurePolicy.ProtoReflect.Descriptor instead.
func (*PodFailurePolicy) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{10}
}

func (x *PodFailurePolicy) GetRules() []*PodFailurePolicyRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// PodFailurePolicyOnExitCodesRequirement describes the requirement for handling
// a failed pod based on its container exit codes. In particular, it lookups the
// .state.terminated.exitCode for each app container and init container status,
// represented by the .status.containerStatuses and .status.initContainerStatuses
// fields in the Pod status, respectively. Containers completed with success
// (exit code 0) are excluded from the requirement check.
type PodFailurePolicyOnExitCodesRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Restricts the check for exit codes to the container with the
	// specified name. When null, the rule applies to all containers.
	// When specified, it should match one the container or initContainer
	// names in the pod template.
	// +optional
	ContainerName *string `protobuf:"bytes,1,opt,name=containerName" json:"containerName,omitempty"`
	// Represents the relationship between the container exit code(s) and the
	// specified values. Containers completed with success (exit code 0) are
	// excluded from the requirement check. Possible values are:
	//   - In: the requirement is satisfied if at least one container exit code
	//     (might be multiple if there are multiple containers not restricted
	//     by the 'containerName' field) is in the set of specified values.
	//   - NotIn: the requirement is satisfied if at least one container exit code
	//     (might be multiple if there are multiple containers not restricted
	//     by the 'containerName' field) is not in the set of specified values.
	//
	// Additional values are considered to be added in the future. Clients should
	// react to an unknown operator by assuming the requirement is not satisfied.
	Operator *string `protobuf:"bytes,2,opt,name=operator" json:"operator,omitempty"`
	// Specifies the set of values. Each returned container exit code (might be
	// multiple in case of multiple containers) is checked against this set of
	// values with respect to the operator. The list of values must be ordered
	// and must not contain duplicates. Value '0' cannot be used for the In operator.
	// At least one element is required. At most 255 elements are allowed.
	// +listType=set
	Values []int32 `protobuf:"varint,3,rep,name=values" json:"values,omitempty"`
}

func (x *PodFailurePolicyOnExitCodesRequirement) Reset() {
	*x = PodFailurePolicyOnExitCodesRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodFailurePolicyOnExitCodesRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodFailurePolicyOnExitCodesRequirement) ProtoMessage() {}

func (x *PodFailurePolicyOnExitCodesRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodFailurePolicyOnExitCodesRequirement.ProtoReflect.Descriptor instead.
func (*PodFailurePolicyOnExitCodesRequirement) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{11}
}

func (x *PodFailurePolicyOnExitCodesRequirement) GetContainerName() string {
	if x != nil && x.ContainerName != nil {
		return *x.ContainerName
	}
	return ""
}

func (x *PodFailurePolicyOnExitCodesRequirement) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *PodFailurePolicyOnExitCodesRequirement) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// PodFailurePolicyOnPodConditionsPattern describes a pattern for matching
// an actual pod condition type.
type PodFailurePolicyOnPodConditionsPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the required Pod condition type. To match a pod condition
	// it is required that specified type equals the pod condition type.
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Specifies the required Pod condition status. To match a pod condition
	// it is required that the specified status equals the pod condition status.
	// Defaults to True.
	Status *string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (x *PodFailurePolicyOnPodConditionsPattern) Reset() {
	*x = PodFailurePolicyOnPodConditionsPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodFailurePolicyOnPodConditionsPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodFailurePolicyOnPodConditionsPattern) ProtoMessage() {}

func (x *PodFailurePolicyOnPodConditionsPattern) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodFailurePolicyOnPodConditionsPattern.ProtoReflect.Descriptor instead.
func (*PodFailurePolicyOnPodConditionsPattern) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{12}
}

func (x *PodFailurePolicyOnPodConditionsPattern) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *PodFailurePolicyOnPodConditionsPattern) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

// PodFailurePolicyRule describes how a pod failure is handled when the requirements are met.
// One of OnExitCodes and onPodConditions, but not both, can be used in each rule.
type PodFailurePolicyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the action taken on a pod failure when the requirements are satisfied.
	// Possible values are:
	//   - FailJob: indicates that the pod's job is marked as Failed and all
	//     running pods are terminated.
	//   - Ignore: indicates that the counter towards the .backoffLimit is not
	//     incremented and a replacement pod is created.
	//   - Count: indicates that the pod is handled in the default way - the
	//     counter towards the .backoffLimit is incremented.
	//
	// Additional values are considered to be added in the future. Clients should
	// react to an unknown action by skipping the rule.
	Action *string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	// Represents the requirement on the container exit codes.
	// +optional
	OnExitCodes *PodFailurePolicyOnExitCodesRequirement `protobuf:"bytes,2,opt,name=onExitCodes" json:"onExitCodes,omitempty"`
	// Represents the requirement on the pod conditions. The requirement is represented
	// as a list of pod condition patterns. The requirement is satisfied if at
	// least one pattern matches an actual pod condition. At most 20 elements are allowed.
	// +listType=atomic
	OnPodConditions []*PodFailurePolicyOnPodConditionsPattern `protobuf:"bytes,3,rep,name=onPodConditions" json:"onPodConditions,omitempty"`
}

func (x *PodFailurePolicyRule) Reset() {
	*x = PodFailurePolicyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodFailurePolicyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodFailurePolicyRule) ProtoMessage() {}

func (x *PodFailurePolicyRule) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodFailurePolicyRule.ProtoReflect.Descriptor instead.
func (*PodFailurePolicyRule) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{13}
}

func (x *PodFailurePolicyRule) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *PodFailurePolicyRule) GetOnExitCodes() *PodFailurePolicyOnExitCodesRequirement {
	if x != nil {
		return x.OnExitCodes
	}
	return nil
}

func (x *PodFailurePolicyRule) GetOnPodConditions() []*PodFailurePolicyOnPodConditionsPattern {
	if x != nil {
		return x.OnPodConditions
	}
	return nil
}

// UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't
// been accounted in Job status counters.
type UncountedTerminatedPods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Succeeded holds UIDs of succeeded Pods.
	// +listType=set
	// +optional
	Succeeded []string `protobuf:"bytes,1,rep,name=succeeded" json:"succeeded,omitempty"`
	// Failed holds UIDs of failed Pods.
	// +listType=set
	// +optional
	Failed []string `protobuf:"bytes,2,rep,name=failed" json:"failed,omitempty"`
}

func (x *UncountedTerminatedPods) Reset() {
	*x = UncountedTerminatedPods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncountedTerminatedPods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncountedTerminatedPods) ProtoMessage() {}

func (x *UncountedTerminatedPods) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncountedTerminatedPods.ProtoReflect.Descriptor instead.
func (*UncountedTerminatedPods) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP(), []int{14}
}

func (x *UncountedTerminatedPods) GetSucceeded() []string {
	if x != nil {
		return x.Succeeded
	}
	return nil
}

func (x *UncountedTerminatedPods) GetFailed() []string {
	if x != nil {
		return x.Failed
	}
	return nil
}

var File_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto protoreflect.FileDescriptor

var file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDesc = []byte{
	0x0a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8b, 0x02, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x62, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x4a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e,
	0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x50, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xb9, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x48, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9d, 0x03, 0x0a, 0x0b,
	0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc2, 0x02, 0x0a, 0x0d,
	0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x6c, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x70,
	0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xff, 0x01, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xc6, 0x02, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x66, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x70, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x07,
	0x4a, 0x6f, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39,
	0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0xf2, 0x04, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x34, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x67, 0x0a, 0x10, 0x70, 0x6f, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x70, 0x6f,
	0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x65, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x55, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x74, 0x6c, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x74, 0x74, 0x6c, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x22, 0xbc, 0x04, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x57, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12,
	0x7c, 0x0a, 0x17, 0x75, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x6f, 0x64, 0x73, 0x52, 0x17, 0x75, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39,
	0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39,
	0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x22, 0x69, 0x0a, 0x10, 0x50, 0x6f, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x55, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x82,
	0x01, 0x0a, 0x26, 0x50, 0x6f, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4f, 0x6e, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x26, 0x50, 0x6f, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x6e, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x14, 0x50, 0x6f,
	0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x0b, 0x6f, 0x6e,
	0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x6e, 0x45, 0x78,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x7b, 0x0a, 0x0f, 0x6f, 0x6e, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x6e, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0f, 0x6f, 0x6e, 0x50,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x17,
	0x55, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42, 0x2b, 0x5a,
	0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31,
}

var (
	file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescOnce sync.Once
	file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescData = file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDesc
)

func file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescGZIP() []byte {
	file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescOnce.Do(func() {
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescData)
	})
	return file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDescData
}

var file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_goTypes = []interface{}{
	(*CronJob)(nil),          // 0: github.com.hyperter96.k8s.io.api.batch.v1.CronJob
	(*CronJobList)(nil),      // 1: github.com.hyperter96.k8s.io.api.batch.v1.CronJobList
	(*CronJobSpec)(nil),      // 2: github.com.hyperter96.k8s.io.api.batch.v1.CronJobSpec
	(*CronJobStatus)(nil),    // 3: github.com.hyperter96.k8s.io.api.batch.v1.CronJobStatus
	(*Job)(nil),              // 4: github.com.hyperter96.k8s.io.api.batch.v1.Job
	(*JobCondition)(nil),     // 5: github.com.hyperter96.k8s.io.api.batch.v1.JobCondition
	(*JobList)(nil),          // 6: github.com.hyperter96.k8s.io.api.batch.v1.JobList
	(*JobSpec)(nil),          // 7: github.com.hyperter96.k8s.io.api.batch.v1.JobSpec
	(*JobStatus)(nil),        // 8: github.com.hyperter96.k8s.io.api.batch.v1.JobStatus
	(*JobTemplateSpec)(nil),  // 9: github.com.hyperter96.k8s.io.api.batch.v1.JobTemplateSpec
	(*PodFailurePolicy)(nil), // 10: github.com.hyperter96.k8s.io.api.batch.v1.PodFailurePolicy
	(*PodFailurePolicyOnExitCodesRequirement)(nil), // 11: github.com.hyperter96.k8s.io.api.batch.v1.PodFailurePolicyOnExitCodesRequirement
	(*PodFailurePolicyOnPodConditionsPattern)(nil), // 12: github.com.hyperter96.k8s.io.api.batch.v1.PodFailurePolicyOnPodConditionsPattern
	(*PodFailurePolicyRule)(nil),                   // 13: github.com.hyperter96.k8s.io.api.batch.v1.PodFailurePolicyRule
	(*UncountedTerminatedPods)(nil),                // 14: github.com.hyperter96.k8s.io.api.batch.v1.UncountedTerminatedPods
	(*v1.ObjectMeta)(nil),                          // 15: github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	(*v1.ListMeta)(nil),                            // 16: github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	(*v11.ObjectReference)(nil),                    // 17: github.com.hyperter96.k8s.io.api.core.v1.ObjectReference
	(*v1.Time)(nil),                                // 18: github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.Time
	(*v1.LabelSelector)(nil),                       // 19: github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
	(*v11.PodTemplateSpec)(nil),                    // 20: github.com.hyperter96.k8s.io.api.core.v1.PodTemplateSpec
}
var file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_depIdxs = []int32{
	15, // 0: github.com.hyperter96.k8s.io.api.batch.v1.CronJob.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	2,  // 1: github.com.hyperter96.k8s.io.api.batch.v1.CronJob.spec:type_name -> github.com.hyperter96.k8s.io.api.batch.v1.CronJobSpec
	3,  // 2: github.com.hyperter96.k8s.io.api.batch.v1.CronJob.status:type_name -> github.com.hyperter96.k8s.io.api.batch.v1.CronJobStatus
	16, // 3: github.com.hyperter96.k8s.io.api.batch.v1.CronJobList.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	0,  // 4: github.com.hyperter96.k8s.io.api.batch.v1.CronJobList.items:type_name -> github.com.hyperter96.k8s.io.api.batch.v1.CronJob
	9,  // 5: github.com.hyperter96.k8s.io.api.batch.v1.CronJobSpec.jobTemplate:type_name -> github.com.hyperter96.k8s.io.api.batch.v1.JobTemplateSpec
	17, // 6: github.com.hyperter96.k8s.io.api.batch.v1.CronJobStatus.active:type_name -> github.com.hyperter96.k8s.io.api.core.v1.ObjectReference
	18, // 7: github.com.hyperter96.k8s.io.api.batch.v1.CronJobStatus.lastScheduleTime:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.Time
	18, // 8: github.com.hyperter96.k8s.io.api.batch.v1.CronJobStatus.lastSuccessfulTime:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.Time
	15, // 9: github.com.hyperter96.k8s.io.api.batch.v1.Job.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	7,  // 10: github.com.hyperter96.k8s.io.api.batch.v1.Job.spec:type_name -> github.com.hyperter96.k8s.io.api.batch.v1.JobSpec
	8,  // 11: github.com.hyperter96.k8s.io.api.batch.v1.Job.status:type_name -> github.com.hyperter96.k8s.io.api.batch.v1.JobStatus
	18, // 12: github.com.hyperter96.k8s.io.api.batch.v1.JobCondition.lastProbeTime:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.Time
	18, // 13: github.com.hyperter96.k8s.io.api.batch.v1.JobCondition.lastTransitionTime:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.Time
	16, // 14: github.com.hyperter96.k8s.io.api.batch.v1.JobList.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	4,  // 15: github.com.hyperter96.k8s.io.api.batch.v1.JobList.items:type_name -> github.com.hyperter96.k8s.io.api.batch.v1.Job
	10, // 16: github.com.hyperter96.k8s.io.api.batch.v1.JobSpec.podFailurePolicy:type_name -> github.com.hyperter96.k8s.io.api.batch.v1.PodFailurePolicy
	19, // 17: github.com.hyperter96.k8s.io.api.batch.v1.JobSpec.selector:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
	20, // 18: github.com.hyperter96.k8s.io.api.batch.v1.JobSpec.template:type_name -> github.com.hyperter96.k8s.io.api.core.v1.PodTemplateSpec
	5,  // 19: github.com.hyperter96.k8s.io.api.batch.v1.JobStatus.conditions:type_name -> github.com.hyperter96.k8s.io.api.batch.v1.JobCondition
	18, // 20: github.com.hyperter96.k8s.io.api.batch.v1.JobStatus.startTime:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.Time
	18, // 21: github.com.hyperter96.k8s.io.api.batch.v1.JobStatus.completionTime:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.Time
	14, // 22: github.com.hyperter96.k8s.io.api.batch.v1.JobStatus.uncountedTerminatedPods:type_name -> github.com.hyperter96.k8s.io.api.batch.v1.UncountedTerminatedPods
	15, // 23: github.com.hyperter96.k8s.io.api.batch.v1.JobTemplateSpec.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	7,  // 24: github.com.hyperter96.k8s.io.api.batch.v1.JobTemplateSpec.spec:type_name -> github.com.hyperter96.k8s.io.api.batch.v1.JobSpec
	13, // 25: github.com.hyperter96.k8s.io.api.batch.v1.PodFailurePolicy.rules:type_name -> github.com.hyperter96.k8s.io.api.batch.v1.PodFailurePolicyRule
	11, // 26: github.com.hyperter96.k8s.io.api.batch.v1.PodFailurePolicyRule.onExitCodes:type_name -> github.com.hyperter96.k8s.io.api.batch.v1.PodFailurePolicyOnExitCodesRequirement
	12, // 27: github.com.hyperter96.k8s.io.api.batch.v1.PodFailurePolicyRule.onPodConditions:type_name -> github.com.hyperter96.k8s.io.api.batch.v1.PodFailurePolicyOnPodConditionsPattern
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_init() }
func file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_init() {
	if File_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronJobList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronJobSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronJobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobTemplateSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodFailurePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodFailurePolicyOnExitCodesRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodFailurePolicyOnPodConditionsPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodFailurePolicyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncountedTerminatedPods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_goTypes,
		DependencyIndexes: file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_depIdxs,
		MessageInfos:      file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_msgTypes,
	}.Build()
	File_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto = out.File
	file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_rawDesc = nil
	file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_goTypes = nil
	file_github_com_hyperter96_k8s_io_api_batch_v1_generated_proto_depIdxs = nil
}
