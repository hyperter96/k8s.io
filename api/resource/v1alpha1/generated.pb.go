//
//Copyright The Kubernetes Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: github.com/hyperter96/k8s.io/api/resource/v1alpha1/generated.proto

package v1alpha1

import (
	v1 "github.com/hyperter96/k8s.io/api/core/v1"
	v11 "github.com/hyperter96/k8s.io/apimachinery/pkg/apis/meta/v1"
	_ "github.com/hyperter96/k8s.io/apimachinery/pkg/runtime"
	_ "github.com/hyperter96/k8s.io/apimachinery/pkg/runtime/schema"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AllocationResult contains attributed of an allocated resource.
type AllocationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ResourceHandle contains arbitrary data returned by the driver after a
	// successful allocation. This is opaque for
	// Kubernetes. Driver documentation may explain to users how to
	// interpret this data if needed.
	//
	// The maximum size of this field is 16KiB. This may get
	// increased in the future, but not reduced.
	// +optional
	ResourceHandle *string `protobuf:"bytes,1,opt,name=resourceHandle" json:"resourceHandle,omitempty"`
	// This field will get set by the resource driver after it has
	// allocated the resource driver to inform the scheduler where it can
	// schedule Pods using the ResourceClaim.
	//
	// Setting this field is optional. If null, the resource is available
	// everywhere.
	// +optional
	AvailableOnNodes *v1.NodeSelector `protobuf:"bytes,2,opt,name=availableOnNodes" json:"availableOnNodes,omitempty"`
	// Shareable determines whether the resource supports more
	// than one consumer at a time.
	// +optional
	Shareable *bool `protobuf:"varint,3,opt,name=shareable" json:"shareable,omitempty"`
}

func (x *AllocationResult) Reset() {
	*x = AllocationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationResult) ProtoMessage() {}

func (x *AllocationResult) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationResult.ProtoReflect.Descriptor instead.
func (*AllocationResult) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{0}
}

func (x *AllocationResult) GetResourceHandle() string {
	if x != nil && x.ResourceHandle != nil {
		return *x.ResourceHandle
	}
	return ""
}

func (x *AllocationResult) GetAvailableOnNodes() *v1.NodeSelector {
	if x != nil {
		return x.AvailableOnNodes
	}
	return nil
}

func (x *AllocationResult) GetShareable() bool {
	if x != nil && x.Shareable != nil {
		return *x.Shareable
	}
	return false
}

// PodScheduling objects hold information that is needed to schedule
// a Pod with ResourceClaims that use "WaitForFirstConsumer" allocation
// mode.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation
// feature gate.
type PodScheduling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object metadata
	// +optional
	Metadata *v11.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Spec describes where resources for the Pod are needed.
	Spec *PodSchedulingSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// Status describes where resources for the Pod can be allocated.
	// +optional
	Status *PodSchedulingStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (x *PodScheduling) Reset() {
	*x = PodScheduling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodScheduling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodScheduling) ProtoMessage() {}

func (x *PodScheduling) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodScheduling.ProtoReflect.Descriptor instead.
func (*PodScheduling) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{1}
}

func (x *PodScheduling) GetMetadata() *v11.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PodScheduling) GetSpec() *PodSchedulingSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *PodScheduling) GetStatus() *PodSchedulingStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// PodSchedulingList is a collection of Pod scheduling objects.
type PodSchedulingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard list metadata
	// +optional
	Metadata *v11.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Items is the list of PodScheduling objects.
	Items []*PodScheduling `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *PodSchedulingList) Reset() {
	*x = PodSchedulingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodSchedulingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodSchedulingList) ProtoMessage() {}

func (x *PodSchedulingList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodSchedulingList.ProtoReflect.Descriptor instead.
func (*PodSchedulingList) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{2}
}

func (x *PodSchedulingList) GetMetadata() *v11.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PodSchedulingList) GetItems() []*PodScheduling {
	if x != nil {
		return x.Items
	}
	return nil
}

// PodSchedulingSpec describes where resources for the Pod are needed.
type PodSchedulingSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SelectedNode is the node for which allocation of ResourceClaims that
	// are referenced by the Pod and that use "WaitForFirstConsumer"
	// allocation is to be attempted.
	// +optional
	SelectedNode *string `protobuf:"bytes,1,opt,name=selectedNode" json:"selectedNode,omitempty"`
	// PotentialNodes lists nodes where the Pod might be able to run.
	//
	// The size of this field is limited to 128. This is large enough for
	// many clusters. Larger clusters may need more attempts to find a node
	// that suits all pending resources. This may get increased in the
	// future, but not reduced.
	//
	// +listType=set
	// +optional
	PotentialNodes []string `protobuf:"bytes,2,rep,name=potentialNodes" json:"potentialNodes,omitempty"`
}

func (x *PodSchedulingSpec) Reset() {
	*x = PodSchedulingSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodSchedulingSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodSchedulingSpec) ProtoMessage() {}

func (x *PodSchedulingSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodSchedulingSpec.ProtoReflect.Descriptor instead.
func (*PodSchedulingSpec) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{3}
}

func (x *PodSchedulingSpec) GetSelectedNode() string {
	if x != nil && x.SelectedNode != nil {
		return *x.SelectedNode
	}
	return ""
}

func (x *PodSchedulingSpec) GetPotentialNodes() []string {
	if x != nil {
		return x.PotentialNodes
	}
	return nil
}

// PodSchedulingStatus describes where resources for the Pod can be allocated.
type PodSchedulingStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ResourceClaims describes resource availability for each
	// pod.spec.resourceClaim entry where the corresponding ResourceClaim
	// uses "WaitForFirstConsumer" allocation mode.
	//
	// +listType=map
	// +listMapKey=name
	// +optional
	ResourceClaims []*ResourceClaimSchedulingStatus `protobuf:"bytes,1,rep,name=resourceClaims" json:"resourceClaims,omitempty"`
}

func (x *PodSchedulingStatus) Reset() {
	*x = PodSchedulingStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodSchedulingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodSchedulingStatus) ProtoMessage() {}

func (x *PodSchedulingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodSchedulingStatus.ProtoReflect.Descriptor instead.
func (*PodSchedulingStatus) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{4}
}

func (x *PodSchedulingStatus) GetResourceClaims() []*ResourceClaimSchedulingStatus {
	if x != nil {
		return x.ResourceClaims
	}
	return nil
}

// ResourceClaim describes which resources are needed by a resource consumer.
// Its status tracks whether the resource has been allocated and what the
// resulting attributes are.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation
// feature gate.
type ResourceClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object metadata
	// +optional
	Metadata *v11.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Spec describes the desired attributes of a resource that then needs
	// to be allocated. It can only be set once when creating the
	// ResourceClaim.
	Spec *ResourceClaimSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// Status describes whether the resource is available and with which
	// attributes.
	// +optional
	Status *ResourceClaimStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (x *ResourceClaim) Reset() {
	*x = ResourceClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceClaim) ProtoMessage() {}

func (x *ResourceClaim) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceClaim.ProtoReflect.Descriptor instead.
func (*ResourceClaim) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceClaim) GetMetadata() *v11.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResourceClaim) GetSpec() *ResourceClaimSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ResourceClaim) GetStatus() *ResourceClaimStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// ResourceClaimConsumerReference contains enough information to let you
// locate the consumer of a ResourceClaim. The user must be a resource in the same
// namespace as the ResourceClaim.
type ResourceClaimConsumerReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// APIGroup is the group for the resource being referenced. It is
	// empty for the core API. This matches the group in the APIVersion
	// that is used when creating the resources.
	// +optional
	ApiGroup *string `protobuf:"bytes,1,opt,name=apiGroup" json:"apiGroup,omitempty"`
	// Resource is the type of resource being referenced, for example "pods".
	Resource *string `protobuf:"bytes,3,opt,name=resource" json:"resource,omitempty"`
	// Name is the name of resource being referenced.
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// UID identifies exactly one incarnation of the resource.
	Uid *string `protobuf:"bytes,5,opt,name=uid" json:"uid,omitempty"`
}

func (x *ResourceClaimConsumerReference) Reset() {
	*x = ResourceClaimConsumerReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceClaimConsumerReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceClaimConsumerReference) ProtoMessage() {}

func (x *ResourceClaimConsumerReference) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceClaimConsumerReference.ProtoReflect.Descriptor instead.
func (*ResourceClaimConsumerReference) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceClaimConsumerReference) GetApiGroup() string {
	if x != nil && x.ApiGroup != nil {
		return *x.ApiGroup
	}
	return ""
}

func (x *ResourceClaimConsumerReference) GetResource() string {
	if x != nil && x.Resource != nil {
		return *x.Resource
	}
	return ""
}

func (x *ResourceClaimConsumerReference) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ResourceClaimConsumerReference) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

// ResourceClaimList is a collection of claims.
type ResourceClaimList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard list metadata
	// +optional
	Metadata *v11.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Items is the list of resource claims.
	Items []*ResourceClaim `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *ResourceClaimList) Reset() {
	*x = ResourceClaimList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceClaimList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceClaimList) ProtoMessage() {}

func (x *ResourceClaimList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceClaimList.ProtoReflect.Descriptor instead.
func (*ResourceClaimList) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{7}
}

func (x *ResourceClaimList) GetMetadata() *v11.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResourceClaimList) GetItems() []*ResourceClaim {
	if x != nil {
		return x.Items
	}
	return nil
}

// ResourceClaimParametersReference contains enough information to let you
// locate the parameters for a ResourceClaim. The object must be in the same
// namespace as the ResourceClaim.
type ResourceClaimParametersReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// APIGroup is the group for the resource being referenced. It is
	// empty for the core API. This matches the group in the APIVersion
	// that is used when creating the resources.
	// +optional
	ApiGroup *string `protobuf:"bytes,1,opt,name=apiGroup" json:"apiGroup,omitempty"`
	// Kind is the type of resource being referenced. This is the same
	// value as in the parameter object's metadata, for example "ConfigMap".
	Kind *string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	// Name is the name of resource being referenced.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *ResourceClaimParametersReference) Reset() {
	*x = ResourceClaimParametersReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceClaimParametersReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceClaimParametersReference) ProtoMessage() {}

func (x *ResourceClaimParametersReference) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceClaimParametersReference.ProtoReflect.Descriptor instead.
func (*ResourceClaimParametersReference) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{8}
}

func (x *ResourceClaimParametersReference) GetApiGroup() string {
	if x != nil && x.ApiGroup != nil {
		return *x.ApiGroup
	}
	return ""
}

func (x *ResourceClaimParametersReference) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ResourceClaimParametersReference) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// ResourceClaimSchedulingStatus contains information about one particular
// ResourceClaim with "WaitForFirstConsumer" allocation mode.
type ResourceClaimSchedulingStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name matches the pod.spec.resourceClaims[*].Name field.
	// +optional
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// UnsuitableNodes lists nodes that the ResourceClaim cannot be
	// allocated for.
	//
	// The size of this field is limited to 128, the same as for
	// PodSchedulingSpec.PotentialNodes. This may get increased in the
	// future, but not reduced.
	//
	// +listType=set
	// +optional
	UnsuitableNodes []string `protobuf:"bytes,2,rep,name=unsuitableNodes" json:"unsuitableNodes,omitempty"`
}

func (x *ResourceClaimSchedulingStatus) Reset() {
	*x = ResourceClaimSchedulingStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceClaimSchedulingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceClaimSchedulingStatus) ProtoMessage() {}

func (x *ResourceClaimSchedulingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceClaimSchedulingStatus.ProtoReflect.Descriptor instead.
func (*ResourceClaimSchedulingStatus) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{9}
}

func (x *ResourceClaimSchedulingStatus) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ResourceClaimSchedulingStatus) GetUnsuitableNodes() []string {
	if x != nil {
		return x.UnsuitableNodes
	}
	return nil
}

// ResourceClaimSpec defines how a resource is to be allocated.
type ResourceClaimSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ResourceClassName references the driver and additional parameters
	// via the name of a ResourceClass that was created as part of the
	// driver deployment.
	ResourceClassName *string `protobuf:"bytes,1,opt,name=resourceClassName" json:"resourceClassName,omitempty"`
	// ParametersRef references a separate object with arbitrary parameters
	// that will be used by the driver when allocating a resource for the
	// claim.
	//
	// The object must be in the same namespace as the ResourceClaim.
	// +optional
	ParametersRef *ResourceClaimParametersReference `protobuf:"bytes,2,opt,name=parametersRef" json:"parametersRef,omitempty"`
	// Allocation can start immediately or when a Pod wants to use the
	// resource. "WaitForFirstConsumer" is the default.
	// +optional
	AllocationMode *string `protobuf:"bytes,3,opt,name=allocationMode" json:"allocationMode,omitempty"`
}

func (x *ResourceClaimSpec) Reset() {
	*x = ResourceClaimSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceClaimSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceClaimSpec) ProtoMessage() {}

func (x *ResourceClaimSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceClaimSpec.ProtoReflect.Descriptor instead.
func (*ResourceClaimSpec) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{10}
}

func (x *ResourceClaimSpec) GetResourceClassName() string {
	if x != nil && x.ResourceClassName != nil {
		return *x.ResourceClassName
	}
	return ""
}

func (x *ResourceClaimSpec) GetParametersRef() *ResourceClaimParametersReference {
	if x != nil {
		return x.ParametersRef
	}
	return nil
}

func (x *ResourceClaimSpec) GetAllocationMode() string {
	if x != nil && x.AllocationMode != nil {
		return *x.AllocationMode
	}
	return ""
}

// ResourceClaimStatus tracks whether the resource has been allocated and what
// the resulting attributes are.
type ResourceClaimStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DriverName is a copy of the driver name from the ResourceClass at
	// the time when allocation started.
	// +optional
	DriverName *string `protobuf:"bytes,1,opt,name=driverName" json:"driverName,omitempty"`
	// Allocation is set by the resource driver once a resource has been
	// allocated successfully. If this is not specified, the resource is
	// not yet allocated.
	// +optional
	Allocation *AllocationResult `protobuf:"bytes,2,opt,name=allocation" json:"allocation,omitempty"`
	// ReservedFor indicates which entities are currently allowed to use
	// the claim. A Pod which references a ResourceClaim which is not
	// reserved for that Pod will not be started.
	//
	// There can be at most 32 such reservations. This may get increased in
	// the future, but not reduced.
	//
	// +listType=map
	// +listMapKey=uid
	// +optional
	ReservedFor []*ResourceClaimConsumerReference `protobuf:"bytes,3,rep,name=reservedFor" json:"reservedFor,omitempty"`
	// DeallocationRequested indicates that a ResourceClaim is to be
	// deallocated.
	//
	// The driver then must deallocate this claim and reset the field
	// together with clearing the Allocation field.
	//
	// While DeallocationRequested is set, no new consumers may be added to
	// ReservedFor.
	// +optional
	DeallocationRequested *bool `protobuf:"varint,4,opt,name=deallocationRequested" json:"deallocationRequested,omitempty"`
}

func (x *ResourceClaimStatus) Reset() {
	*x = ResourceClaimStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceClaimStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceClaimStatus) ProtoMessage() {}

func (x *ResourceClaimStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceClaimStatus.ProtoReflect.Descriptor instead.
func (*ResourceClaimStatus) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{11}
}

func (x *ResourceClaimStatus) GetDriverName() string {
	if x != nil && x.DriverName != nil {
		return *x.DriverName
	}
	return ""
}

func (x *ResourceClaimStatus) GetAllocation() *AllocationResult {
	if x != nil {
		return x.Allocation
	}
	return nil
}

func (x *ResourceClaimStatus) GetReservedFor() []*ResourceClaimConsumerReference {
	if x != nil {
		return x.ReservedFor
	}
	return nil
}

func (x *ResourceClaimStatus) GetDeallocationRequested() bool {
	if x != nil && x.DeallocationRequested != nil {
		return *x.DeallocationRequested
	}
	return false
}

// ResourceClaimTemplate is used to produce ResourceClaim objects.
type ResourceClaimTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object metadata
	// +optional
	Metadata *v11.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Describes the ResourceClaim that is to be generated.
	//
	// This field is immutable. A ResourceClaim will get created by the
	// control plane for a Pod when needed and then not get updated
	// anymore.
	Spec *ResourceClaimTemplateSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (x *ResourceClaimTemplate) Reset() {
	*x = ResourceClaimTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceClaimTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceClaimTemplate) ProtoMessage() {}

func (x *ResourceClaimTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceClaimTemplate.ProtoReflect.Descriptor instead.
func (*ResourceClaimTemplate) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{12}
}

func (x *ResourceClaimTemplate) GetMetadata() *v11.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResourceClaimTemplate) GetSpec() *ResourceClaimTemplateSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// ResourceClaimTemplateList is a collection of claim templates.
type ResourceClaimTemplateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard list metadata
	// +optional
	Metadata *v11.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Items is the list of resource claim templates.
	Items []*ResourceClaimTemplate `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *ResourceClaimTemplateList) Reset() {
	*x = ResourceClaimTemplateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceClaimTemplateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceClaimTemplateList) ProtoMessage() {}

func (x *ResourceClaimTemplateList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceClaimTemplateList.ProtoReflect.Descriptor instead.
func (*ResourceClaimTemplateList) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{13}
}

func (x *ResourceClaimTemplateList) GetMetadata() *v11.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResourceClaimTemplateList) GetItems() []*ResourceClaimTemplate {
	if x != nil {
		return x.Items
	}
	return nil
}

// ResourceClaimTemplateSpec contains the metadata and fields for a ResourceClaim.
type ResourceClaimTemplateSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ObjectMeta may contain labels and annotations that will be copied into the PVC
	// when creating it. No other fields are allowed and will be rejected during
	// validation.
	// +optional
	Metadata *v11.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Spec for the ResourceClaim. The entire content is copied unchanged
	// into the ResourceClaim that gets created from this template. The
	// same fields as in a ResourceClaim are also valid here.
	Spec *ResourceClaimSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (x *ResourceClaimTemplateSpec) Reset() {
	*x = ResourceClaimTemplateSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceClaimTemplateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceClaimTemplateSpec) ProtoMessage() {}

func (x *ResourceClaimTemplateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceClaimTemplateSpec.ProtoReflect.Descriptor instead.
func (*ResourceClaimTemplateSpec) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{14}
}

func (x *ResourceClaimTemplateSpec) GetMetadata() *v11.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResourceClaimTemplateSpec) GetSpec() *ResourceClaimSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// ResourceClass is used by administrators to influence how resources
// are allocated.
//
// This is an alpha type and requires enabling the DynamicResourceAllocation
// feature gate.
type ResourceClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object metadata
	// +optional
	Metadata *v11.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// DriverName defines the name of the dynamic resource driver that is
	// used for allocation of a ResourceClaim that uses this class.
	//
	// Resource drivers have a unique name in forward domain order
	// (acme.example.com).
	DriverName *string `protobuf:"bytes,2,opt,name=driverName" json:"driverName,omitempty"`
	// ParametersRef references an arbitrary separate object that may hold
	// parameters that will be used by the driver when allocating a
	// resource that uses this class. A dynamic resource driver can
	// distinguish between parameters stored here and and those stored in
	// ResourceClaimSpec.
	// +optional
	ParametersRef *ResourceClassParametersReference `protobuf:"bytes,3,opt,name=parametersRef" json:"parametersRef,omitempty"`
	// Only nodes matching the selector will be considered by the scheduler
	// when trying to find a Node that fits a Pod when that Pod uses
	// a ResourceClaim that has not been allocated yet.
	//
	// Setting this field is optional. If null, all nodes are candidates.
	// +optional
	SuitableNodes *v1.NodeSelector `protobuf:"bytes,4,opt,name=suitableNodes" json:"suitableNodes,omitempty"`
}

func (x *ResourceClass) Reset() {
	*x = ResourceClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceClass) ProtoMessage() {}

func (x *ResourceClass) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceClass.ProtoReflect.Descriptor instead.
func (*ResourceClass) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{15}
}

func (x *ResourceClass) GetMetadata() *v11.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResourceClass) GetDriverName() string {
	if x != nil && x.DriverName != nil {
		return *x.DriverName
	}
	return ""
}

func (x *ResourceClass) GetParametersRef() *ResourceClassParametersReference {
	if x != nil {
		return x.ParametersRef
	}
	return nil
}

func (x *ResourceClass) GetSuitableNodes() *v1.NodeSelector {
	if x != nil {
		return x.SuitableNodes
	}
	return nil
}

// ResourceClassList is a collection of classes.
type ResourceClassList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard list metadata
	// +optional
	Metadata *v11.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Items is the list of resource classes.
	Items []*ResourceClass `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *ResourceClassList) Reset() {
	*x = ResourceClassList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceClassList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceClassList) ProtoMessage() {}

func (x *ResourceClassList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceClassList.ProtoReflect.Descriptor instead.
func (*ResourceClassList) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{16}
}

func (x *ResourceClassList) GetMetadata() *v11.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResourceClassList) GetItems() []*ResourceClass {
	if x != nil {
		return x.Items
	}
	return nil
}

// ResourceClassParametersReference contains enough information to let you
// locate the parameters for a ResourceClass.
type ResourceClassParametersReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// APIGroup is the group for the resource being referenced. It is
	// empty for the core API. This matches the group in the APIVersion
	// that is used when creating the resources.
	// +optional
	ApiGroup *string `protobuf:"bytes,1,opt,name=apiGroup" json:"apiGroup,omitempty"`
	// Kind is the type of resource being referenced. This is the same
	// value as in the parameter object's metadata.
	Kind *string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	// Name is the name of resource being referenced.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// Namespace that contains the referenced resource. Must be empty
	// for cluster-scoped resources and non-empty for namespaced
	// resources.
	// +optional
	Namespace *string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
}

func (x *ResourceClassParametersReference) Reset() {
	*x = ResourceClassParametersReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceClassParametersReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceClassParametersReference) ProtoMessage() {}

func (x *ResourceClassParametersReference) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceClassParametersReference.ProtoReflect.Descriptor instead.
func (*ResourceClassParametersReference) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP(), []int{17}
}

func (x *ResourceClassParametersReference) GetApiGroup() string {
	if x != nil && x.ApiGroup != nil {
		return *x.ApiGroup
	}
	return ""
}

func (x *ResourceClassParametersReference) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ResourceClassParametersReference) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ResourceClassParametersReference) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

var File_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto protoreflect.FileDescriptor

var file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDesc = []byte{
	0x0a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2f,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x62, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0xaf, 0x02, 0x0a, 0x0d, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x5f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5f, 0x0a, 0x11, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x79,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x62, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x59, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x5f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7e, 0x0a, 0x1e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x11,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x66, 0x0a, 0x20,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x6e, 0x73,
	0x75, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e, 0x73, 0x75, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12,
	0x34, 0x0a, 0x15, 0x64, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x64, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x62, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xde, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x22, 0xed, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x54, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x66, 0x12, 0x5c, 0x0a, 0x0d, 0x73, 0x75, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x73, 0x75, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70,
	0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70,
	0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x34, 0x5a, 0x32,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31,
}

var (
	file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescOnce sync.Once
	file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescData = file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDesc
)

func file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescGZIP() []byte {
	file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescOnce.Do(func() {
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescData)
	})
	return file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDescData
}

var file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_goTypes = []interface{}{
	(*AllocationResult)(nil),                 // 0: github.com.hyperter96.k8s.io.api.resource.v1alpha1.AllocationResult
	(*PodScheduling)(nil),                    // 1: github.com.hyperter96.k8s.io.api.resource.v1alpha1.PodScheduling
	(*PodSchedulingList)(nil),                // 2: github.com.hyperter96.k8s.io.api.resource.v1alpha1.PodSchedulingList
	(*PodSchedulingSpec)(nil),                // 3: github.com.hyperter96.k8s.io.api.resource.v1alpha1.PodSchedulingSpec
	(*PodSchedulingStatus)(nil),              // 4: github.com.hyperter96.k8s.io.api.resource.v1alpha1.PodSchedulingStatus
	(*ResourceClaim)(nil),                    // 5: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaim
	(*ResourceClaimConsumerReference)(nil),   // 6: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimConsumerReference
	(*ResourceClaimList)(nil),                // 7: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimList
	(*ResourceClaimParametersReference)(nil), // 8: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimParametersReference
	(*ResourceClaimSchedulingStatus)(nil),    // 9: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimSchedulingStatus
	(*ResourceClaimSpec)(nil),                // 10: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimSpec
	(*ResourceClaimStatus)(nil),              // 11: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimStatus
	(*ResourceClaimTemplate)(nil),            // 12: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimTemplate
	(*ResourceClaimTemplateList)(nil),        // 13: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimTemplateList
	(*ResourceClaimTemplateSpec)(nil),        // 14: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimTemplateSpec
	(*ResourceClass)(nil),                    // 15: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClass
	(*ResourceClassList)(nil),                // 16: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClassList
	(*ResourceClassParametersReference)(nil), // 17: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClassParametersReference
	(*v1.NodeSelector)(nil),                  // 18: github.com.hyperter96.k8s.io.api.core.v1.NodeSelector
	(*v11.ObjectMeta)(nil),                   // 19: github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	(*v11.ListMeta)(nil),                     // 20: github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
}
var file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_depIdxs = []int32{
	18, // 0: github.com.hyperter96.k8s.io.api.resource.v1alpha1.AllocationResult.availableOnNodes:type_name -> github.com.hyperter96.k8s.io.api.core.v1.NodeSelector
	19, // 1: github.com.hyperter96.k8s.io.api.resource.v1alpha1.PodScheduling.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	3,  // 2: github.com.hyperter96.k8s.io.api.resource.v1alpha1.PodScheduling.spec:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.PodSchedulingSpec
	4,  // 3: github.com.hyperter96.k8s.io.api.resource.v1alpha1.PodScheduling.status:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.PodSchedulingStatus
	20, // 4: github.com.hyperter96.k8s.io.api.resource.v1alpha1.PodSchedulingList.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	1,  // 5: github.com.hyperter96.k8s.io.api.resource.v1alpha1.PodSchedulingList.items:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.PodScheduling
	9,  // 6: github.com.hyperter96.k8s.io.api.resource.v1alpha1.PodSchedulingStatus.resourceClaims:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimSchedulingStatus
	19, // 7: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaim.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	10, // 8: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaim.spec:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimSpec
	11, // 9: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaim.status:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimStatus
	20, // 10: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimList.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	5,  // 11: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimList.items:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaim
	8,  // 12: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimSpec.parametersRef:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimParametersReference
	0,  // 13: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimStatus.allocation:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.AllocationResult
	6,  // 14: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimStatus.reservedFor:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimConsumerReference
	19, // 15: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimTemplate.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	14, // 16: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimTemplate.spec:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimTemplateSpec
	20, // 17: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimTemplateList.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	12, // 18: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimTemplateList.items:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimTemplate
	19, // 19: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimTemplateSpec.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	10, // 20: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimTemplateSpec.spec:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClaimSpec
	19, // 21: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClass.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	17, // 22: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClass.parametersRef:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClassParametersReference
	18, // 23: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClass.suitableNodes:type_name -> github.com.hyperter96.k8s.io.api.core.v1.NodeSelector
	20, // 24: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClassList.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	15, // 25: github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClassList.items:type_name -> github.com.hyperter96.k8s.io.api.resource.v1alpha1.ResourceClass
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_init() }
func file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_init() {
	if File_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodScheduling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodSchedulingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodSchedulingSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodSchedulingStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceClaimConsumerReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceClaimList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceClaimParametersReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceClaimSchedulingStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceClaimSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceClaimStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceClaimTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceClaimTemplateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceClaimTemplateSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceClassList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceClassParametersReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_goTypes,
		DependencyIndexes: file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_depIdxs,
		MessageInfos:      file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_msgTypes,
	}.Build()
	File_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto = out.File
	file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_rawDesc = nil
	file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_goTypes = nil
	file_github_com_hyperter96_k8s_io_api_resource_v1alpha1_generated_proto_depIdxs = nil
}
