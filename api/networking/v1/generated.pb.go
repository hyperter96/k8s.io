//
//Copyright The Kubernetes Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file was autogenerated by go-to-protobuf. Do not edit it manually!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: github.com/hyperter96/k8s.io/api/networking/v1/generated.proto

package v1

import (
	v11 "github.com/hyperter96/k8s.io/api/core/v1"
	v1 "github.com/hyperter96/k8s.io/apimachinery/pkg/apis/meta/v1"
	_ "github.com/hyperter96/k8s.io/apimachinery/pkg/runtime"
	_ "github.com/hyperter96/k8s.io/apimachinery/pkg/runtime/schema"
	intstr "github.com/hyperter96/k8s.io/apimachinery/pkg/util/intstr"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HTTPIngressPath associates a path with a backend. Incoming urls matching the
// path are forwarded to the backend.
type HTTPIngressPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path is matched against the path of an incoming request. Currently it can
	// contain characters disallowed from the conventional "path" part of a URL
	// as defined by RFC 3986. Paths must begin with a '/' and must be present
	// when using PathType with value "Exact" or "Prefix".
	// +optional
	Path *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// PathType determines the interpretation of the Path matching. PathType can
	// be one of the following values:
	//   - Exact: Matches the URL path exactly.
	//   - Prefix: Matches based on a URL path prefix split by '/'. Matching is
	//     done on a path element by element basis. A path element refers is the
	//     list of labels in the path split by the '/' separator. A request is a
	//     match for path p if every p is an element-wise prefix of p of the
	//     request path. Note that if the last element of the path is a substring
	//     of the last element in request path, it is not a match (e.g. /foo/bar
	//     matches /foo/bar/baz, but does not match /foo/barbaz).
	//   - ImplementationSpecific: Interpretation of the Path matching is up to
	//     the IngressClass. Implementations can treat this as a separate PathType
	//     or treat it identically to Prefix or Exact path types.
	//
	// Implementations are required to support all path types.
	PathType *string `protobuf:"bytes,3,opt,name=pathType" json:"pathType,omitempty"`
	// Backend defines the referenced service endpoint to which the traffic
	// will be forwarded to.
	Backend *IngressBackend `protobuf:"bytes,2,opt,name=backend" json:"backend,omitempty"`
}

func (x *HTTPIngressPath) Reset() {
	*x = HTTPIngressPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPIngressPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPIngressPath) ProtoMessage() {}

func (x *HTTPIngressPath) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPIngressPath.ProtoReflect.Descriptor instead.
func (*HTTPIngressPath) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{0}
}

func (x *HTTPIngressPath) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *HTTPIngressPath) GetPathType() string {
	if x != nil && x.PathType != nil {
		return *x.PathType
	}
	return ""
}

func (x *HTTPIngressPath) GetBackend() *IngressBackend {
	if x != nil {
		return x.Backend
	}
	return nil
}

// HTTPIngressRuleValue is a list of http selectors pointing to backends.
// In the example: http://<host>/<path>?<searchpart> -> backend where
// where parts of the url correspond to RFC 3986, this resource will be used
// to match against everything after the last '/' and before the first '?'
// or '#'.
type HTTPIngressRuleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A collection of paths that map requests to backends.
	// +listType=atomic
	Paths []*HTTPIngressPath `protobuf:"bytes,1,rep,name=paths" json:"paths,omitempty"`
}

func (x *HTTPIngressRuleValue) Reset() {
	*x = HTTPIngressRuleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPIngressRuleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPIngressRuleValue) ProtoMessage() {}

func (x *HTTPIngressRuleValue) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPIngressRuleValue.ProtoReflect.Descriptor instead.
func (*HTTPIngressRuleValue) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{1}
}

func (x *HTTPIngressRuleValue) GetPaths() []*HTTPIngressPath {
	if x != nil {
		return x.Paths
	}
	return nil
}

// IPBlock describes a particular CIDR (Ex. "192.168.1.0/24","2001:db8::/64") that is allowed
// to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs
// that should not be included within this rule.
type IPBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CIDR is a string representing the IP Block
	// Valid examples are "192.168.1.0/24" or "2001:db8::/64"
	Cidr *string `protobuf:"bytes,1,opt,name=cidr" json:"cidr,omitempty"`
	// Except is a slice of CIDRs that should not be included within an IP Block
	// Valid examples are "192.168.1.0/24" or "2001:db8::/64"
	// Except values will be rejected if they are outside the CIDR range
	// +optional
	Except []string `protobuf:"bytes,2,rep,name=except" json:"except,omitempty"`
}

func (x *IPBlock) Reset() {
	*x = IPBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPBlock) ProtoMessage() {}

func (x *IPBlock) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPBlock.ProtoReflect.Descriptor instead.
func (*IPBlock) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{2}
}

func (x *IPBlock) GetCidr() string {
	if x != nil && x.Cidr != nil {
		return *x.Cidr
	}
	return ""
}

func (x *IPBlock) GetExcept() []string {
	if x != nil {
		return x.Except
	}
	return nil
}

// Ingress is a collection of rules that allow inbound connections to reach the
// endpoints defined by a backend. An Ingress can be configured to give services
// externally-reachable urls, load balance traffic, terminate SSL, offer name
// based virtual hosting etc.
type Ingress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Spec is the desired state of the Ingress.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Spec *IngressSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// Status is the current state of the Ingress.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Status *IngressStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (x *Ingress) Reset() {
	*x = Ingress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingress) ProtoMessage() {}

func (x *Ingress) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingress.ProtoReflect.Descriptor instead.
func (*Ingress) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{3}
}

func (x *Ingress) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Ingress) GetSpec() *IngressSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Ingress) GetStatus() *IngressStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// IngressBackend describes all endpoints for a given service and port.
type IngressBackend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service references a Service as a Backend.
	// This is a mutually exclusive setting with "Resource".
	// +optional
	Service *IngressServiceBackend `protobuf:"bytes,4,opt,name=service" json:"service,omitempty"`
	// Resource is an ObjectRef to another Kubernetes resource in the namespace
	// of the Ingress object. If resource is specified, a service.Name and
	// service.Port must not be specified.
	// This is a mutually exclusive setting with "Service".
	// +optional
	Resource *v11.TypedLocalObjectReference `protobuf:"bytes,3,opt,name=resource" json:"resource,omitempty"`
}

func (x *IngressBackend) Reset() {
	*x = IngressBackend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressBackend) ProtoMessage() {}

func (x *IngressBackend) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressBackend.ProtoReflect.Descriptor instead.
func (*IngressBackend) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{4}
}

func (x *IngressBackend) GetService() *IngressServiceBackend {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *IngressBackend) GetResource() *v11.TypedLocalObjectReference {
	if x != nil {
		return x.Resource
	}
	return nil
}

// IngressClass represents the class of the Ingress, referenced by the Ingress
// Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be
// used to indicate that an IngressClass should be considered default. When a
// single IngressClass resource has this annotation set to true, new Ingress
// resources without a class specified will be assigned this default class.
type IngressClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Spec is the desired state of the IngressClass.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Spec *IngressClassSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (x *IngressClass) Reset() {
	*x = IngressClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressClass) ProtoMessage() {}

func (x *IngressClass) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressClass.ProtoReflect.Descriptor instead.
func (*IngressClass) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{5}
}

func (x *IngressClass) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *IngressClass) GetSpec() *IngressClassSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// IngressClassList is a collection of IngressClasses.
type IngressClassList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard list metadata.
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Items is the list of IngressClasses.
	Items []*IngressClass `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *IngressClassList) Reset() {
	*x = IngressClassList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressClassList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressClassList) ProtoMessage() {}

func (x *IngressClassList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressClassList.ProtoReflect.Descriptor instead.
func (*IngressClassList) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{6}
}

func (x *IngressClassList) GetMetadata() *v1.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *IngressClassList) GetItems() []*IngressClass {
	if x != nil {
		return x.Items
	}
	return nil
}

// IngressClassParametersReference identifies an API object. This can be used
// to specify a cluster or namespace-scoped resource.
type IngressClassParametersReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// APIGroup is the group for the resource being referenced. If APIGroup is
	// not specified, the specified Kind must be in the core API group. For any
	// other third-party types, APIGroup is required.
	// +optional
	APIGroup *string `protobuf:"bytes,1,opt,name=aPIGroup" json:"aPIGroup,omitempty"`
	// Kind is the type of resource being referenced.
	Kind *string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	// Name is the name of resource being referenced.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// Scope represents if this refers to a cluster or namespace scoped resource.
	// This may be set to "Cluster" (default) or "Namespace".
	// +optional
	Scope *string `protobuf:"bytes,4,opt,name=scope" json:"scope,omitempty"`
	// Namespace is the namespace of the resource being referenced. This field is
	// required when scope is set to "Namespace" and must be unset when scope is set to
	// "Cluster".
	// +optional
	Namespace *string `protobuf:"bytes,5,opt,name=namespace" json:"namespace,omitempty"`
}

func (x *IngressClassParametersReference) Reset() {
	*x = IngressClassParametersReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressClassParametersReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressClassParametersReference) ProtoMessage() {}

func (x *IngressClassParametersReference) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressClassParametersReference.ProtoReflect.Descriptor instead.
func (*IngressClassParametersReference) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{7}
}

func (x *IngressClassParametersReference) GetAPIGroup() string {
	if x != nil && x.APIGroup != nil {
		return *x.APIGroup
	}
	return ""
}

func (x *IngressClassParametersReference) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *IngressClassParametersReference) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *IngressClassParametersReference) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *IngressClassParametersReference) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

// IngressClassSpec provides information about the class of an Ingress.
type IngressClassSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Controller refers to the name of the controller that should handle this
	// class. This allows for different "flavors" that are controlled by the
	// same controller. For example, you may have different Parameters for the
	// same implementing controller. This should be specified as a
	// domain-prefixed path no more than 250 characters in length, e.g.
	// "acme.io/ingress-controller". This field is immutable.
	Controller *string `protobuf:"bytes,1,opt,name=controller" json:"controller,omitempty"`
	// Parameters is a link to a custom resource containing additional
	// configuration for the controller. This is optional if the controller does
	// not require extra parameters.
	// +optional
	Parameters *IngressClassParametersReference `protobuf:"bytes,2,opt,name=parameters" json:"parameters,omitempty"`
}

func (x *IngressClassSpec) Reset() {
	*x = IngressClassSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressClassSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressClassSpec) ProtoMessage() {}

func (x *IngressClassSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressClassSpec.ProtoReflect.Descriptor instead.
func (*IngressClassSpec) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{8}
}

func (x *IngressClassSpec) GetController() string {
	if x != nil && x.Controller != nil {
		return *x.Controller
	}
	return ""
}

func (x *IngressClassSpec) GetParameters() *IngressClassParametersReference {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// IngressList is a collection of Ingress.
type IngressList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Items is the list of Ingress.
	Items []*Ingress `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *IngressList) Reset() {
	*x = IngressList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressList) ProtoMessage() {}

func (x *IngressList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressList.ProtoReflect.Descriptor instead.
func (*IngressList) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{9}
}

func (x *IngressList) GetMetadata() *v1.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *IngressList) GetItems() []*Ingress {
	if x != nil {
		return x.Items
	}
	return nil
}

// IngressLoadBalancerIngress represents the status of a load-balancer ingress point.
type IngressLoadBalancerIngress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP is set for load-balancer ingress points that are IP based.
	// +optional
	Ip *string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	// Hostname is set for load-balancer ingress points that are DNS based.
	// +optional
	Hostname *string `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	// Ports provides information about the ports exposed by this LoadBalancer.
	// +listType=atomic
	// +optional
	Ports []*IngressPortStatus `protobuf:"bytes,4,rep,name=ports" json:"ports,omitempty"`
}

func (x *IngressLoadBalancerIngress) Reset() {
	*x = IngressLoadBalancerIngress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressLoadBalancerIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressLoadBalancerIngress) ProtoMessage() {}

func (x *IngressLoadBalancerIngress) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressLoadBalancerIngress.ProtoReflect.Descriptor instead.
func (*IngressLoadBalancerIngress) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{10}
}

func (x *IngressLoadBalancerIngress) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *IngressLoadBalancerIngress) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *IngressLoadBalancerIngress) GetPorts() []*IngressPortStatus {
	if x != nil {
		return x.Ports
	}
	return nil
}

// IngressLoadBalancerStatus represents the status of a load-balancer.
type IngressLoadBalancerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ingress is a list containing ingress points for the load-balancer.
	// +optional
	Ingress []*IngressLoadBalancerIngress `protobuf:"bytes,1,rep,name=ingress" json:"ingress,omitempty"`
}

func (x *IngressLoadBalancerStatus) Reset() {
	*x = IngressLoadBalancerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressLoadBalancerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressLoadBalancerStatus) ProtoMessage() {}

func (x *IngressLoadBalancerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressLoadBalancerStatus.ProtoReflect.Descriptor instead.
func (*IngressLoadBalancerStatus) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{11}
}

func (x *IngressLoadBalancerStatus) GetIngress() []*IngressLoadBalancerIngress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

// IngressPortStatus represents the error condition of a service port
type IngressPortStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port is the port number of the ingress port.
	Port *int32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	// Protocol is the protocol of the ingress port.
	// The supported values are: "TCP", "UDP", "SCTP"
	Protocol *string `protobuf:"bytes,2,opt,name=protocol" json:"protocol,omitempty"`
	// Error is to record the problem with the service port
	// The format of the error shall comply with the following rules:
	//   - built-in error values shall be specified in this file and those shall use
	//     CamelCase names
	//   - cloud provider specific error values must have names that comply with the
	//     format foo.example.com/CamelCase.
	//
	// ---
	// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
	// +optional
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Pattern=`^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$`
	// +kubebuilder:validation:MaxLength=316
	Error *string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (x *IngressPortStatus) Reset() {
	*x = IngressPortStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressPortStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressPortStatus) ProtoMessage() {}

func (x *IngressPortStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressPortStatus.ProtoReflect.Descriptor instead.
func (*IngressPortStatus) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{12}
}

func (x *IngressPortStatus) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *IngressPortStatus) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *IngressPortStatus) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// IngressRule represents the rules mapping the paths under a specified host to
// the related backend services. Incoming requests are first evaluated for a host
// match, then routed to the backend associated with the matching IngressRuleValue.
type IngressRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host is the fully qualified domain name of a network host, as defined by RFC 3986.
	// Note the following deviations from the "host" part of the
	// URI as defined in RFC 3986:
	//  1. IPs are not allowed. Currently an IngressRuleValue can only apply to
	//     the IP in the Spec of the parent Ingress.
	//  2. The `:` delimiter is not respected because ports are not allowed.
	//     Currently the port of an Ingress is implicitly :80 for http and
	//     :443 for https.
	//
	// Both these may change in the future.
	// Incoming requests are matched against the host before the
	// IngressRuleValue. If the host is unspecified, the Ingress routes all
	// traffic based on the specified IngressRuleValue.
	//
	// Host can be "precise" which is a domain name without the terminating dot of
	// a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name
	// prefixed with a single wildcard label (e.g. "*.foo.com").
	// The wildcard character '*' must appear by itself as the first DNS label and
	// matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*").
	// Requests will be matched against the Host field in the following way:
	// 1. If Host is precise, the request matches this rule if the http host header is equal to Host.
	// 2. If Host is a wildcard, then the request matches this rule if the http host header
	// is to equal to the suffix (removing the first label) of the wildcard rule.
	// +optional
	Host *string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	// IngressRuleValue represents a rule to route requests for this IngressRule.
	// If unspecified, the rule defaults to a http catch-all. Whether that sends
	// just traffic matching the host to the default backend or all traffic to the
	// default backend, is left to the controller fulfilling the Ingress. Http is
	// currently the only supported IngressRuleValue.
	// +optional
	IngressRuleValue *IngressRuleValue `protobuf:"bytes,2,opt,name=ingressRuleValue" json:"ingressRuleValue,omitempty"`
}

func (x *IngressRule) Reset() {
	*x = IngressRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressRule) ProtoMessage() {}

func (x *IngressRule) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressRule.ProtoReflect.Descriptor instead.
func (*IngressRule) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{13}
}

func (x *IngressRule) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *IngressRule) GetIngressRuleValue() *IngressRuleValue {
	if x != nil {
		return x.IngressRuleValue
	}
	return nil
}

// IngressRuleValue represents a rule to apply against incoming requests. If the
// rule is satisfied, the request is routed to the specified backend. Currently
// mixing different types of rules in a single Ingress is disallowed, so exactly
// one of the following must be set.
type IngressRuleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// +optional
	Http *HTTPIngressRuleValue `protobuf:"bytes,1,opt,name=http" json:"http,omitempty"`
}

func (x *IngressRuleValue) Reset() {
	*x = IngressRuleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressRuleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressRuleValue) ProtoMessage() {}

func (x *IngressRuleValue) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressRuleValue.ProtoReflect.Descriptor instead.
func (*IngressRuleValue) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{14}
}

func (x *IngressRuleValue) GetHttp() *HTTPIngressRuleValue {
	if x != nil {
		return x.Http
	}
	return nil
}

// IngressServiceBackend references a Kubernetes Service as a Backend.
type IngressServiceBackend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the referenced service. The service must exist in
	// the same namespace as the Ingress object.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Port of the referenced service. A port name or port number
	// is required for a IngressServiceBackend.
	Port *ServiceBackendPort `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
}

func (x *IngressServiceBackend) Reset() {
	*x = IngressServiceBackend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressServiceBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressServiceBackend) ProtoMessage() {}

func (x *IngressServiceBackend) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressServiceBackend.ProtoReflect.Descriptor instead.
func (*IngressServiceBackend) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{15}
}

func (x *IngressServiceBackend) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *IngressServiceBackend) GetPort() *ServiceBackendPort {
	if x != nil {
		return x.Port
	}
	return nil
}

// IngressSpec describes the Ingress the user wishes to exist.
type IngressSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IngressClassName is the name of an IngressClass cluster resource. Ingress
	// controller implementations use this field to know whether they should be
	// serving this Ingress resource, by a transitive connection
	// (controller -> IngressClass -> Ingress resource). Although the
	// `kubernetes.io/ingress.class` annotation (simple constant name) was never
	// formally defined, it was widely supported by Ingress controllers to create
	// a direct binding between Ingress controller and Ingress resources. Newly
	// created Ingress resources should prefer using the field. However, even
	// though the annotation is officially deprecated, for backwards compatibility
	// reasons, ingress controllers should still honor that annotation if present.
	// +optional
	IngressClassName *string `protobuf:"bytes,4,opt,name=ingressClassName" json:"ingressClassName,omitempty"`
	// DefaultBackend is the backend that should handle requests that don't
	// match any rule. If Rules are not specified, DefaultBackend must be specified.
	// If DefaultBackend is not set, the handling of requests that do not match any
	// of the rules will be up to the Ingress controller.
	// +optional
	DefaultBackend *IngressBackend `protobuf:"bytes,1,opt,name=defaultBackend" json:"defaultBackend,omitempty"`
	// TLS configuration. Currently the Ingress only supports a single TLS
	// port, 443. If multiple members of this list specify different hosts, they
	// will be multiplexed on the same port according to the hostname specified
	// through the SNI TLS extension, if the ingress controller fulfilling the
	// ingress supports SNI.
	// +listType=atomic
	// +optional
	Tls []*IngressTLS `protobuf:"bytes,2,rep,name=tls" json:"tls,omitempty"`
	// A list of host rules used to configure the Ingress. If unspecified, or
	// no rule matches, all traffic is sent to the default backend.
	// +listType=atomic
	// +optional
	Rules []*IngressRule `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
}

func (x *IngressSpec) Reset() {
	*x = IngressSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressSpec) ProtoMessage() {}

func (x *IngressSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressSpec.ProtoReflect.Descriptor instead.
func (*IngressSpec) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{16}
}

func (x *IngressSpec) GetIngressClassName() string {
	if x != nil && x.IngressClassName != nil {
		return *x.IngressClassName
	}
	return ""
}

func (x *IngressSpec) GetDefaultBackend() *IngressBackend {
	if x != nil {
		return x.DefaultBackend
	}
	return nil
}

func (x *IngressSpec) GetTls() []*IngressTLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *IngressSpec) GetRules() []*IngressRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// IngressStatus describe the current state of the Ingress.
type IngressStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LoadBalancer contains the current status of the load-balancer.
	// +optional
	LoadBalancer *IngressLoadBalancerStatus `protobuf:"bytes,1,opt,name=loadBalancer" json:"loadBalancer,omitempty"`
}

func (x *IngressStatus) Reset() {
	*x = IngressStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressStatus) ProtoMessage() {}

func (x *IngressStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressStatus.ProtoReflect.Descriptor instead.
func (*IngressStatus) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{17}
}

func (x *IngressStatus) GetLoadBalancer() *IngressLoadBalancerStatus {
	if x != nil {
		return x.LoadBalancer
	}
	return nil
}

// IngressTLS describes the transport layer security associated with an Ingress.
type IngressTLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hosts are a list of hosts included in the TLS certificate. The values in
	// this list must match the name/s used in the tlsSecret. Defaults to the
	// wildcard host setting for the loadbalancer controller fulfilling this
	// Ingress, if left unspecified.
	// +listType=atomic
	// +optional
	Hosts []string `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
	// SecretName is the name of the secret used to terminate TLS traffic on
	// port 443. Field is left optional to allow TLS routing based on SNI
	// hostname alone. If the SNI host in a listener conflicts with the "Host"
	// header field used by an IngressRule, the SNI host is used for termination
	// and value of the Host header is used for routing.
	// +optional
	SecretName *string `protobuf:"bytes,2,opt,name=secretName" json:"secretName,omitempty"`
}

func (x *IngressTLS) Reset() {
	*x = IngressTLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressTLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressTLS) ProtoMessage() {}

func (x *IngressTLS) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressTLS.ProtoReflect.Descriptor instead.
func (*IngressTLS) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{18}
}

func (x *IngressTLS) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *IngressTLS) GetSecretName() string {
	if x != nil && x.SecretName != nil {
		return *x.SecretName
	}
	return ""
}

// NetworkPolicy describes what network traffic is allowed for a set of Pods
type NetworkPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard object's metadata.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Specification of the desired behavior for this NetworkPolicy.
	// +optional
	Spec *NetworkPolicySpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	// Status is the current state of the NetworkPolicy.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	// +optional
	Status *NetworkPolicyStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (x *NetworkPolicy) Reset() {
	*x = NetworkPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicy) ProtoMessage() {}

func (x *NetworkPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicy.ProtoReflect.Descriptor instead.
func (*NetworkPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{19}
}

func (x *NetworkPolicy) GetMetadata() *v1.ObjectMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NetworkPolicy) GetSpec() *NetworkPolicySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *NetworkPolicy) GetStatus() *NetworkPolicyStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods
// matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to.
// This type is beta-level in 1.8
type NetworkPolicyEgressRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of destination ports for outgoing traffic.
	// Each item in this list is combined using a logical OR. If this field is
	// empty or missing, this rule matches all ports (traffic not restricted by port).
	// If this field is present and contains at least one item, then this rule allows
	// traffic only if the traffic matches at least one port in the list.
	// +optional
	Ports []*NetworkPolicyPort `protobuf:"bytes,1,rep,name=ports" json:"ports,omitempty"`
	// List of destinations for outgoing traffic of pods selected for this rule.
	// Items in this list are combined using a logical OR operation. If this field is
	// empty or missing, this rule matches all destinations (traffic not restricted by
	// destination). If this field is present and contains at least one item, this rule
	// allows traffic only if the traffic matches at least one item in the to list.
	// +optional
	To []*NetworkPolicyPeer `protobuf:"bytes,2,rep,name=to" json:"to,omitempty"`
}

func (x *NetworkPolicyEgressRule) Reset() {
	*x = NetworkPolicyEgressRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPolicyEgressRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyEgressRule) ProtoMessage() {}

func (x *NetworkPolicyEgressRule) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyEgressRule.ProtoReflect.Descriptor instead.
func (*NetworkPolicyEgressRule) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{20}
}

func (x *NetworkPolicyEgressRule) GetPorts() []*NetworkPolicyPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *NetworkPolicyEgressRule) GetTo() []*NetworkPolicyPeer {
	if x != nil {
		return x.To
	}
	return nil
}

// NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods
// matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
type NetworkPolicyIngressRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of ports which should be made accessible on the pods selected for this
	// rule. Each item in this list is combined using a logical OR. If this field is
	// empty or missing, this rule matches all ports (traffic not restricted by port).
	// If this field is present and contains at least one item, then this rule allows
	// traffic only if the traffic matches at least one port in the list.
	// +optional
	Ports []*NetworkPolicyPort `protobuf:"bytes,1,rep,name=ports" json:"ports,omitempty"`
	// List of sources which should be able to access the pods selected for this rule.
	// Items in this list are combined using a logical OR operation. If this field is
	// empty or missing, this rule matches all sources (traffic not restricted by
	// source). If this field is present and contains at least one item, this rule
	// allows traffic only if the traffic matches at least one item in the from list.
	// +optional
	From []*NetworkPolicyPeer `protobuf:"bytes,2,rep,name=from" json:"from,omitempty"`
}

func (x *NetworkPolicyIngressRule) Reset() {
	*x = NetworkPolicyIngressRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPolicyIngressRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyIngressRule) ProtoMessage() {}

func (x *NetworkPolicyIngressRule) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyIngressRule.ProtoReflect.Descriptor instead.
func (*NetworkPolicyIngressRule) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{21}
}

func (x *NetworkPolicyIngressRule) GetPorts() []*NetworkPolicyPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *NetworkPolicyIngressRule) GetFrom() []*NetworkPolicyPeer {
	if x != nil {
		return x.From
	}
	return nil
}

// NetworkPolicyList is a list of NetworkPolicy objects.
type NetworkPolicyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard list metadata.
	// More info: https://git.github.com.hyperter96.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	Metadata *v1.ListMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Items is a list of schema objects.
	Items []*NetworkPolicy `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *NetworkPolicyList) Reset() {
	*x = NetworkPolicyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPolicyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyList) ProtoMessage() {}

func (x *NetworkPolicyList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyList.ProtoReflect.Descriptor instead.
func (*NetworkPolicyList) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{22}
}

func (x *NetworkPolicyList) GetMetadata() *v1.ListMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NetworkPolicyList) GetItems() []*NetworkPolicy {
	if x != nil {
		return x.Items
	}
	return nil
}

// NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of
// fields are allowed
type NetworkPolicyPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is a label selector which selects Pods. This field follows standard label
	// selector semantics; if present but empty, it selects all pods.
	//
	// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects
	// the Pods matching PodSelector in the Namespaces selected by NamespaceSelector.
	// Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
	// +optional
	PodSelector *v1.LabelSelector `protobuf:"bytes,1,opt,name=podSelector" json:"podSelector,omitempty"`
	// Selects Namespaces using cluster-scoped labels. This field follows standard label
	// selector semantics; if present but empty, it selects all namespaces.
	//
	// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects
	// the Pods matching PodSelector in the Namespaces selected by NamespaceSelector.
	// Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
	// +optional
	NamespaceSelector *v1.LabelSelector `protobuf:"bytes,2,opt,name=namespaceSelector" json:"namespaceSelector,omitempty"`
	// IPBlock defines policy on a particular IPBlock. If this field is set then
	// neither of the other fields can be.
	// +optional
	IpBlock *IPBlock `protobuf:"bytes,3,opt,name=ipBlock" json:"ipBlock,omitempty"`
}

func (x *NetworkPolicyPeer) Reset() {
	*x = NetworkPolicyPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPolicyPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyPeer) ProtoMessage() {}

func (x *NetworkPolicyPeer) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyPeer.ProtoReflect.Descriptor instead.
func (*NetworkPolicyPeer) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{23}
}

func (x *NetworkPolicyPeer) GetPodSelector() *v1.LabelSelector {
	if x != nil {
		return x.PodSelector
	}
	return nil
}

func (x *NetworkPolicyPeer) GetNamespaceSelector() *v1.LabelSelector {
	if x != nil {
		return x.NamespaceSelector
	}
	return nil
}

func (x *NetworkPolicyPeer) GetIpBlock() *IPBlock {
	if x != nil {
		return x.IpBlock
	}
	return nil
}

// NetworkPolicyPort describes a port to allow traffic on
type NetworkPolicyPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this
	// field defaults to TCP.
	// +optional
	Protocol *string `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	// The port on the given protocol. This can either be a numerical or named
	// port on a pod. If this field is not provided, this matches all port names and
	// numbers.
	// If present, only traffic on the specified protocol AND port will be matched.
	// +optional
	Port *intstr.IntOrString `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	// If set, indicates that the range of ports from port to endPort, inclusive,
	// should be allowed by the policy. This field cannot be defined if the port field
	// is not defined or if the port field is defined as a named (string) port.
	// The endPort must be equal or greater than port.
	// +optional
	EndPort *int32 `protobuf:"varint,3,opt,name=endPort" json:"endPort,omitempty"`
}

func (x *NetworkPolicyPort) Reset() {
	*x = NetworkPolicyPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPolicyPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyPort) ProtoMessage() {}

func (x *NetworkPolicyPort) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyPort.ProtoReflect.Descriptor instead.
func (*NetworkPolicyPort) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{24}
}

func (x *NetworkPolicyPort) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *NetworkPolicyPort) GetPort() *intstr.IntOrString {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *NetworkPolicyPort) GetEndPort() int32 {
	if x != nil && x.EndPort != nil {
		return *x.EndPort
	}
	return 0
}

// NetworkPolicySpec provides the specification of a NetworkPolicy
type NetworkPolicySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selects the pods to which this NetworkPolicy object applies. The array of
	// ingress rules is applied to any pods selected by this field. Multiple network
	// policies can select the same set of pods. In this case, the ingress rules for
	// each are combined additively. This field is NOT optional and follows standard
	// label selector semantics. An empty podSelector matches all pods in this
	// namespace.
	PodSelector *v1.LabelSelector `protobuf:"bytes,1,opt,name=podSelector" json:"podSelector,omitempty"`
	// List of ingress rules to be applied to the selected pods. Traffic is allowed to
	// a pod if there are no NetworkPolicies selecting the pod
	// (and cluster policy otherwise allows the traffic), OR if the traffic source is
	// the pod's local node, OR if the traffic matches at least one ingress rule
	// across all of the NetworkPolicy objects whose podSelector matches the pod. If
	// this field is empty then this NetworkPolicy does not allow any traffic (and serves
	// solely to ensure that the pods it selects are isolated by default)
	// +optional
	Ingress []*NetworkPolicyIngressRule `protobuf:"bytes,2,rep,name=ingress" json:"ingress,omitempty"`
	// List of egress rules to be applied to the selected pods. Outgoing traffic is
	// allowed if there are no NetworkPolicies selecting the pod (and cluster policy
	// otherwise allows the traffic), OR if the traffic matches at least one egress rule
	// across all of the NetworkPolicy objects whose podSelector matches the pod. If
	// this field is empty then this NetworkPolicy limits all outgoing traffic (and serves
	// solely to ensure that the pods it selects are isolated by default).
	// This field is beta-level in 1.8
	// +optional
	Egress []*NetworkPolicyEgressRule `protobuf:"bytes,3,rep,name=egress" json:"egress,omitempty"`
	// List of rule types that the NetworkPolicy relates to.
	// Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"].
	// If this field is not specified, it will default based on the existence of Ingress or Egress rules;
	// policies that contain an Egress section are assumed to affect Egress, and all policies
	// (whether or not they contain an Ingress section) are assumed to affect Ingress.
	// If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ].
	// Likewise, if you want to write a policy that specifies that no egress is allowed,
	// you must specify a policyTypes value that include "Egress" (since such a policy would not include
	// an Egress section and would otherwise default to just [ "Ingress" ]).
	// This field is beta-level in 1.8
	// +optional
	PolicyTypes []string `protobuf:"bytes,4,rep,name=policyTypes" json:"policyTypes,omitempty"`
}

func (x *NetworkPolicySpec) Reset() {
	*x = NetworkPolicySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPolicySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicySpec) ProtoMessage() {}

func (x *NetworkPolicySpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicySpec.ProtoReflect.Descriptor instead.
func (*NetworkPolicySpec) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{25}
}

func (x *NetworkPolicySpec) GetPodSelector() *v1.LabelSelector {
	if x != nil {
		return x.PodSelector
	}
	return nil
}

func (x *NetworkPolicySpec) GetIngress() []*NetworkPolicyIngressRule {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *NetworkPolicySpec) GetEgress() []*NetworkPolicyEgressRule {
	if x != nil {
		return x.Egress
	}
	return nil
}

func (x *NetworkPolicySpec) GetPolicyTypes() []string {
	if x != nil {
		return x.PolicyTypes
	}
	return nil
}

// NetworkPolicyStatus describe the current state of the NetworkPolicy.
type NetworkPolicyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Conditions holds an array of metav1.Condition that describe the state of the NetworkPolicy.
	// Current service state
	// +optional
	// +patchMergeKey=type
	// +patchStrategy=merge
	// +listType=map
	// +listMapKey=type
	Conditions []*v1.Condition `protobuf:"bytes,1,rep,name=conditions" json:"conditions,omitempty"`
}

func (x *NetworkPolicyStatus) Reset() {
	*x = NetworkPolicyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkPolicyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkPolicyStatus) ProtoMessage() {}

func (x *NetworkPolicyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkPolicyStatus.ProtoReflect.Descriptor instead.
func (*NetworkPolicyStatus) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{26}
}

func (x *NetworkPolicyStatus) GetConditions() []*v1.Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// ServiceBackendPort is the service port being referenced.
type ServiceBackendPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of the port on the Service.
	// This is a mutually exclusive setting with "Number".
	// +optional
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Number is the numerical port number (e.g. 80) on the Service.
	// This is a mutually exclusive setting with "Name".
	// +optional
	Number *int32 `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (x *ServiceBackendPort) Reset() {
	*x = ServiceBackendPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceBackendPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceBackendPort) ProtoMessage() {}

func (x *ServiceBackendPort) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceBackendPort.ProtoReflect.Descriptor instead.
func (*ServiceBackendPort) Descriptor() ([]byte, []int) {
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP(), []int{27}
}

func (x *ServiceBackendPort) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ServiceBackendPort) GetNumber() int32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

var File_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto protoreflect.FileDescriptor

var file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x1a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39,
	0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72,
	0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f,
	0x69, 0x6e, 0x74, 0x73, 0x74, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x48, 0x54, 0x54, 0x50, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x22, 0x6d, 0x0a, 0x14, 0x48, 0x54, 0x54, 0x50, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x22, 0x35, 0x0a, 0x07, 0x49, 0x50, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x22, 0x95, 0x02, 0x0a, 0x07, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x55, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x5f, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x22, 0xc8, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39,
	0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x99, 0x01,
	0x0a, 0x1f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x50, 0x49, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x50, 0x49, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x10, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x6f,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22,
	0xbe, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x4d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x64, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x59, 0x0a, 0x11, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6c, 0x0a, 0x10, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x75, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x04, 0x68, 0x74, 0x74,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x56, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xc2, 0x02, 0x0a, 0x0b, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x4c, 0x0a,
	0x03, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x4c, 0x53, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x7e,
	0x0a, 0x0d, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x6d, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x22, 0x42,
	0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x4c, 0x53, 0x12, 0x14, 0x0a, 0x05,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x5b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc5, 0x01, 0x0a,
	0x17, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x51, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x65, 0x72,
	0x52, 0x02, 0x74, 0x6f, 0x22, 0xca, 0x01, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x57, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39,
	0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xcc,
	0x02, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x50, 0x65, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x0b, 0x70, 0x6f, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39,
	0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x70, 0x6f, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x77, 0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x07, 0x69, 0x70,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x07, 0x69, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xa5, 0x01,
	0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x5a, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x75, 0x74,
	0x69, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x4f, 0x72, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xe7, 0x02, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x6b, 0x0a, 0x0b, 0x70,
	0x6f, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x70, 0x6f, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39,
	0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x06,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22,
	0x7c, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x65, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x39, 0x36, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x40, 0x0a,
	0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79,
	0x70, 0x65, 0x72, 0x74, 0x65, 0x72, 0x39, 0x36, 0x2f, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31,
}

var (
	file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescOnce sync.Once
	file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescData = file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDesc
)

func file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescGZIP() []byte {
	file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescOnce.Do(func() {
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescData)
	})
	return file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDescData
}

var file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_goTypes = []interface{}{
	(*HTTPIngressPath)(nil),                 // 0: github.com.hyperter96.k8s.io.api.networking.v1.HTTPIngressPath
	(*HTTPIngressRuleValue)(nil),            // 1: github.com.hyperter96.k8s.io.api.networking.v1.HTTPIngressRuleValue
	(*IPBlock)(nil),                         // 2: github.com.hyperter96.k8s.io.api.networking.v1.IPBlock
	(*Ingress)(nil),                         // 3: github.com.hyperter96.k8s.io.api.networking.v1.Ingress
	(*IngressBackend)(nil),                  // 4: github.com.hyperter96.k8s.io.api.networking.v1.IngressBackend
	(*IngressClass)(nil),                    // 5: github.com.hyperter96.k8s.io.api.networking.v1.IngressClass
	(*IngressClassList)(nil),                // 6: github.com.hyperter96.k8s.io.api.networking.v1.IngressClassList
	(*IngressClassParametersReference)(nil), // 7: github.com.hyperter96.k8s.io.api.networking.v1.IngressClassParametersReference
	(*IngressClassSpec)(nil),                // 8: github.com.hyperter96.k8s.io.api.networking.v1.IngressClassSpec
	(*IngressList)(nil),                     // 9: github.com.hyperter96.k8s.io.api.networking.v1.IngressList
	(*IngressLoadBalancerIngress)(nil),      // 10: github.com.hyperter96.k8s.io.api.networking.v1.IngressLoadBalancerIngress
	(*IngressLoadBalancerStatus)(nil),       // 11: github.com.hyperter96.k8s.io.api.networking.v1.IngressLoadBalancerStatus
	(*IngressPortStatus)(nil),               // 12: github.com.hyperter96.k8s.io.api.networking.v1.IngressPortStatus
	(*IngressRule)(nil),                     // 13: github.com.hyperter96.k8s.io.api.networking.v1.IngressRule
	(*IngressRuleValue)(nil),                // 14: github.com.hyperter96.k8s.io.api.networking.v1.IngressRuleValue
	(*IngressServiceBackend)(nil),           // 15: github.com.hyperter96.k8s.io.api.networking.v1.IngressServiceBackend
	(*IngressSpec)(nil),                     // 16: github.com.hyperter96.k8s.io.api.networking.v1.IngressSpec
	(*IngressStatus)(nil),                   // 17: github.com.hyperter96.k8s.io.api.networking.v1.IngressStatus
	(*IngressTLS)(nil),                      // 18: github.com.hyperter96.k8s.io.api.networking.v1.IngressTLS
	(*NetworkPolicy)(nil),                   // 19: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicy
	(*NetworkPolicyEgressRule)(nil),         // 20: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyEgressRule
	(*NetworkPolicyIngressRule)(nil),        // 21: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyIngressRule
	(*NetworkPolicyList)(nil),               // 22: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyList
	(*NetworkPolicyPeer)(nil),               // 23: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyPeer
	(*NetworkPolicyPort)(nil),               // 24: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyPort
	(*NetworkPolicySpec)(nil),               // 25: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicySpec
	(*NetworkPolicyStatus)(nil),             // 26: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyStatus
	(*ServiceBackendPort)(nil),              // 27: github.com.hyperter96.k8s.io.api.networking.v1.ServiceBackendPort
	(*v1.ObjectMeta)(nil),                   // 28: github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	(*v11.TypedLocalObjectReference)(nil),   // 29: github.com.hyperter96.k8s.io.api.core.v1.TypedLocalObjectReference
	(*v1.ListMeta)(nil),                     // 30: github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	(*v1.LabelSelector)(nil),                // 31: github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
	(*intstr.IntOrString)(nil),              // 32: github.com.hyperter96.k8s.io.apimachinery.pkg.util.intstr.IntOrString
	(*v1.Condition)(nil),                    // 33: github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.Condition
}
var file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_depIdxs = []int32{
	4,  // 0: github.com.hyperter96.k8s.io.api.networking.v1.HTTPIngressPath.backend:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IngressBackend
	0,  // 1: github.com.hyperter96.k8s.io.api.networking.v1.HTTPIngressRuleValue.paths:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.HTTPIngressPath
	28, // 2: github.com.hyperter96.k8s.io.api.networking.v1.Ingress.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	16, // 3: github.com.hyperter96.k8s.io.api.networking.v1.Ingress.spec:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IngressSpec
	17, // 4: github.com.hyperter96.k8s.io.api.networking.v1.Ingress.status:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IngressStatus
	15, // 5: github.com.hyperter96.k8s.io.api.networking.v1.IngressBackend.service:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IngressServiceBackend
	29, // 6: github.com.hyperter96.k8s.io.api.networking.v1.IngressBackend.resource:type_name -> github.com.hyperter96.k8s.io.api.core.v1.TypedLocalObjectReference
	28, // 7: github.com.hyperter96.k8s.io.api.networking.v1.IngressClass.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	8,  // 8: github.com.hyperter96.k8s.io.api.networking.v1.IngressClass.spec:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IngressClassSpec
	30, // 9: github.com.hyperter96.k8s.io.api.networking.v1.IngressClassList.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	5,  // 10: github.com.hyperter96.k8s.io.api.networking.v1.IngressClassList.items:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IngressClass
	7,  // 11: github.com.hyperter96.k8s.io.api.networking.v1.IngressClassSpec.parameters:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IngressClassParametersReference
	30, // 12: github.com.hyperter96.k8s.io.api.networking.v1.IngressList.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	3,  // 13: github.com.hyperter96.k8s.io.api.networking.v1.IngressList.items:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.Ingress
	12, // 14: github.com.hyperter96.k8s.io.api.networking.v1.IngressLoadBalancerIngress.ports:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IngressPortStatus
	10, // 15: github.com.hyperter96.k8s.io.api.networking.v1.IngressLoadBalancerStatus.ingress:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IngressLoadBalancerIngress
	14, // 16: github.com.hyperter96.k8s.io.api.networking.v1.IngressRule.ingressRuleValue:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IngressRuleValue
	1,  // 17: github.com.hyperter96.k8s.io.api.networking.v1.IngressRuleValue.http:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.HTTPIngressRuleValue
	27, // 18: github.com.hyperter96.k8s.io.api.networking.v1.IngressServiceBackend.port:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.ServiceBackendPort
	4,  // 19: github.com.hyperter96.k8s.io.api.networking.v1.IngressSpec.defaultBackend:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IngressBackend
	18, // 20: github.com.hyperter96.k8s.io.api.networking.v1.IngressSpec.tls:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IngressTLS
	13, // 21: github.com.hyperter96.k8s.io.api.networking.v1.IngressSpec.rules:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IngressRule
	11, // 22: github.com.hyperter96.k8s.io.api.networking.v1.IngressStatus.loadBalancer:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IngressLoadBalancerStatus
	28, // 23: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicy.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta
	25, // 24: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicy.spec:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicySpec
	26, // 25: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicy.status:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyStatus
	24, // 26: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyEgressRule.ports:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyPort
	23, // 27: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyEgressRule.to:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyPeer
	24, // 28: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyIngressRule.ports:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyPort
	23, // 29: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyIngressRule.from:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyPeer
	30, // 30: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyList.metadata:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta
	19, // 31: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyList.items:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicy
	31, // 32: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyPeer.podSelector:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
	31, // 33: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyPeer.namespaceSelector:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
	2,  // 34: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyPeer.ipBlock:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.IPBlock
	32, // 35: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyPort.port:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.util.intstr.IntOrString
	31, // 36: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicySpec.podSelector:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
	21, // 37: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicySpec.ingress:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyIngressRule
	20, // 38: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicySpec.egress:type_name -> github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyEgressRule
	33, // 39: github.com.hyperter96.k8s.io.api.networking.v1.NetworkPolicyStatus.conditions:type_name -> github.com.hyperter96.k8s.io.apimachinery.pkg.apis.meta.v1.Condition
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_init() }
func file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_init() {
	if File_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPIngressPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPIngressRuleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressBackend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressClassList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressClassParametersReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressClassSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressLoadBalancerIngress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressLoadBalancerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressPortStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressRuleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressServiceBackend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressTLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPolicyEgressRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPolicyIngressRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPolicyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPolicyPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPolicyPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPolicySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkPolicyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceBackendPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_goTypes,
		DependencyIndexes: file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_depIdxs,
		MessageInfos:      file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_msgTypes,
	}.Build()
	File_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto = out.File
	file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_rawDesc = nil
	file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_goTypes = nil
	file_github_com_hyperter96_k8s_io_api_networking_v1_generated_proto_depIdxs = nil
}
